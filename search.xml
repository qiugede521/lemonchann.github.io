<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搜索引擎的高级搜索技巧</title>
    <url>/2021/03/06/Advanced%20search%20techniques%20for%20search%20engines/</url>
    <content><![CDATA[<p>有些时候，搜索引擎非常懂我们，随意输入关键字，便可以找到我们想要的结果（除了广告）。</p>
<p>但是有的时候，比如关键字较为普遍的情况下，则很难得到自己想要的结果，往往需要一页一页的翻找，才能找得到。</p>
<p>那么有没有办法可以让搜索引擎更懂我们呢？</p>
<p>答案是有的：目前主流的搜索引擎都支持<code>搜索操作符</code>，利用搜索操作符，可以更快捷的找到我们想要的结果。</p>
<span id="more"></span>

<h1 id="GUI的方式"><a href="#GUI的方式" class="headerlink" title="GUI的方式"></a>GUI的方式</h1><p>国内应该是百度用的多，如果不想了解<code>搜索操作符</code>，也许你可以试试这个：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL2dhb2ppL2FkdmFuY2VkLmh0bWw=">百度高级搜索入口<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="常用的搜索操作符"><a href="#常用的搜索操作符" class="headerlink" title="常用的搜索操作符"></a>常用的搜索操作符</h1><ol>
<li><p>整词搜索</p>
<p> 有时候，我们需要搜索一个词语，或者句子，但是由于收录较少或者其他原因，搜索引擎便会聪明的进行拆分和取舍，以展示更多的结果信息，这种做法很好，但并不是所有情况都适合；那么在不合适的情况下，我们可以选择使用英文双引号告诉搜索引擎，我要精确匹配，其他的信息就不要给我了。</p>
<p> 举个例子：</p>
<blockquote>
<p>“For a very sober-minded people, death is just another great adventure.”</p>
</blockquote>
</li>
<li><p>搜索文件类型 <code>filetype</code></p>
<p> 当我们想找一篇论文，或者是一个Excel表格的时候，可以选择使用<code>filetype</code>搜索操作符号，便可以只展示特定文件类型的搜索结果。比如，PDF，DOCX，TXT，PPT 等。注意：等价于 <code>ext:</code> 操作符。</p>
<p> 举个例子：</p>
<blockquote>
<p> apple filetype:pdf / apple ext:pdf</p>
</blockquote>
</li>
<li><p>搜索指定网站</p>
<p> 部分网站不提供搜索功能，或者搜索功能不怎么好用的情况，可以选择使用<code>site</code>操作符，用来只展示来自特定网站的结果。</p>
<p> 举个例子：</p>
<blockquote>
<p> site:blog.kekxv.com</p>
</blockquote>
</li>
<li><p>搜索标题关键字</p>
<p> 现在搜索引擎非常快，已经不限制关键字只在标题之中，还能再网页文章内出现，然而，我们也许会只想要搜索包含关键字标题的网站，并不希望内容包含而标题不包含，那么在这种情况之下，可以使用<code>intitle</code>搜索操作符；查找标题中带有特定词语的网页。<br> 举个例子</p>
<blockquote>
<p>intitle:apple</p>
</blockquote>
</li>
<li><p>电源搜索</p>
<p> 查阅指定电影信息。如果电影在附近上映，还会告诉你开场时间。</p>
<p> 举个例子</p>
<blockquote>
<p>movie:(Avengers Endgame)</p>
</blockquote>
</li>
</ol>
<h1 id="内容来源参考"><a href="#内容来源参考" class="headerlink" title="内容来源参考"></a>内容来源参考</h1><p>内容参考 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzczNzQ0ZWYyNjVkYTJkYzY3NWMwMjk=">[译] 谷歌搜索操作符大全（包含 42 个高级操作符）<i class="fa fa-external-link-alt"></i></span> 想要了解更多，可以<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzczNzQ0ZWYyNjVkYTJkYzY3NWMwMjk=">点击<i class="fa fa-external-link-alt"></i></span>前往查看。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>search</tag>
        <tag>baidu</tag>
        <tag>google</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓WebView高版本无法加载</title>
    <url>/2021/05/06/Android%20WebView%20high%20version%20cannot%20be%20loaded/</url>
    <content><![CDATA[<p>在电脑虚拟机上测试的时候，发现本地<code>127.0.0.1</code>无法开始加载，出现<code>net::ERR_CLEARTEXT_NOT_PERMITTED</code>错误，这是由于<code>Android</code>在<code>8</code>的版本之后默认启用<code>https</code>，由于项目中只是使用了<code>http</code>，所以安全机制下拦截了。</p>
<p>解决的办法：在<code>manifest</code>中<code>application</code>节点添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:usesCleartextTraffic=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>加了之后结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest ...&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">    &lt;application</span><br><span class="line">        ...</span><br><span class="line">        android:usesCleartextTraffic=&quot;true&quot;</span><br><span class="line">        ...&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>M1</code>的系统上，虚拟机的 <code>webview</code> <code>(2020-12-28)</code>有点问题，需要升级，可以到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBrbWlycm9yLmNvbS8=">https://www.apkmirror.com<i class="fa fa-external-link-alt"></i></span> 进行下载更新包。</p>
<p>注意，下载的时候一定要选择 <code>apk</code> 的版本！！！</p>
<p><code>M1</code> 上<code>(2020-12-28)</code>只支持 <code>arm64-v8a</code>，下载的时候需要注意支持<code>arm64-v8a</code>。</p>
<blockquote>
<p>备注： 搜索包名可以使用 <code>com.google.android.webview</code>。</p>
</blockquote>
<p>参考文档</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzIxMzIwL2FydGljbGUvZGV0YWlscy84NDQwMDgyNQ==">net::ERR_CLEARTEXT_NOT_PERMITTED Android9.0无法加载url<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>android</tag>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑棒 Z8350 使用 Ubuntu Server 系统</title>
    <url>/2021/01/06/Compute%20Stick%20Z8350%20uses%20Ubuntu%20Server%20system/</url>
    <content><![CDATA[<p>只是关于一个电脑棒的简单评测</p>
<span id="more"></span>

<p>因为贪玩，并且<code>树莓派zero</code>性能问题以及不支持<code>docker</code>，所以采购了一款差不多大小的单机板子，就是这款：</p>
<p><img src="/images/20210807/12/201912212245415342818.jpg" alt="z8350" title="z8350"></p>
<p>购买链接我就不放了，有兴趣可以自己搜一下。我购买的是4G+64G的版本（看起来真像小广告，啧啧啧）。<br>对了，这玩意有几个坑，记得看下后面的注意事项，万一踩坑了，希望能有帮助。</p>
<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>请准备好以下东西，之后会用到：</p>
<ol>
<li>HDMI 显示器</li>
<li>USB 以太网卡</li>
<li>USB 鼠标键盘</li>
<li>可以随时上网搜索答案的PC或者手机</li>
<li>闲置U盘</li>
</ol>
<h1 id="选择-Linux-发行版本"><a href="#选择-Linux-发行版本" class="headerlink" title="选择 Linux 发行版本"></a>选择 Linux 发行版本</h1><p>根据自己的爱好，选择一款喜欢的发行版本。<br>（要显示器的各位，可以考虑下 <code>kali linux</code>最新版，试试卧底模式，嘿嘿嘿）<br>我选择的是<code>ubuntu server</code>，简单点。<br>下载好之后，可以选择烧录到<code>U盘</code>作为启动盘，或者使用 <code>IODD</code> 之类的工具。<br>完成之后，设置BIOS从U盘启动，然后安装系统。<br>装完系统之后就可以愉快的玩耍了。<br>什么？不能？还有问题？那看看注意事项，看看能不能帮到你，或者给我评论留言。</p>
<p>对了，WiFi 操作可以参考一下 <span class="exturl" data-url="aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy80NjE4MjUvaG93LXRvLWNvbm5lY3QtdG8td2lmaS1mcm9tLXRoZS1jb21tYW5kLWxpbmU=">How to connect to WiFi from the command line?<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>我手上这款有几个问题，不知道其他的是不是也会这样（并不只有一个套餐，所以emmmm，不是很确定）</p>
<h2 id="开机必须接-HDMI"><a href="#开机必须接-HDMI" class="headerlink" title="开机必须接 HDMI"></a>开机必须接 HDMI</h2><p>这个是一个很难受的坑，毕竟用我刷成了 <code>Ubuntu Server</code>，也就是不想用屏幕，但是这货没有 <code>HDMI</code>接入居然不开机！不开机！！！而且你完全不晓得为啥！！！这还是我测试多次之后发现的。这个的解决办法的话是采购一个<code>HDMI</code>欺骗器，嗯，没错，居然有这种玩意，据说是某些显卡不插屏幕的情况下不工作，所以诞生了这玩意，嗯，真是要好好感谢那些个显卡。</p>
<img src="/images/20210807/12/201912212256173180815.png" alt="hdmi欺骗器" width="300" />

<p>这样就可以了吗？并没有！！！有没有发现这玩意是公头的，而电脑棒的也是公头的！！！并不能用好吧。不过幸好，万能的商家（不是同一个商家）有出售 <code>HDMI  母对母</code> 线。</p>
<img src="/images/20210807/12/201912212302221485693.png" alt="hdmi 母对母" width="300" />

<p>把这三个接到一起，就可以无显示器开机了，这样就不需要买个HDMI显示器了，嘿嘿。（啥？你想要屏幕？那你买一个就行了呀）。</p>
<h2 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h2><p>重装系统嘛，肯定是要进<code>BIOS</code>得嘛，不然引导就不太好搞（当然也可以在Windows 下使用软件进行特殊方式的引导，不过比较麻烦，而且内存要求相对较高，喜欢折腾的可以试试），然后问题来了，如果手贱，将启动类型<code>Windows 8.1</code>改为了<code>Android</code>的话，基本上是开不了机的，设置似乎也设置不了，因为HDMI好像不输出了（为什么是基本上？为什么是好像？emmm，因为我没有针对测试过），在这种情况下，怎么办？一开始的时候我是真的不晓得咋整，都准备退货了（毕竟商家应该能解决），想想好像挺麻烦，所以想拆开看看，看看有没有电池啥的，毕竟有些BIOS掉电的话，还是可以恢复设置的。然后我就拆了（各位拆的时候请小心翼翼一点，划伤或者损坏的话，自己用起来也不太好看，退货的话，也损害了商家利益）。<br>emmmmmm<br>这货内部居然用了挡片之类的以及散热片粘死了！！！太伤心。<br>准备放弃的时候，嗯？这怎么还有一个按钮？这居然有一个不能从外面按的按钮！不用想，按它！<br>然后<code>BIOS</code>就被恢复设置了。嗯，没错，就是这样。<br>（这按钮可能还有其他功能，我没测试）</p>
<h2 id="通电开机"><a href="#通电开机" class="headerlink" title="通电开机"></a>通电开机</h2><p>需要在<code>BIOS</code>里面设置一下，否则的话，通电之后还需要按一下按钮，不太方便。</p>
<h2 id="WIFI-问题"><a href="#WIFI-问题" class="headerlink" title="WIFI 问题"></a>WIFI 问题</h2><p>最难受的就是 <code>WIFI</code> 问题了，重装之后，找不到<code>WIFI</code>设备，一度准备放弃，都开始准备买一个<code>mini WiFi</code>了，没错，就是那种很便宜的那种。<br>不过在我不懈的努力<del>搜索</del>之下，终于找到了解决方案：<br>原来内核是支持这款 <code>WIFI</code> 的（对了这款 <code>WiFi</code> 型号是 <code>AP6255</code>，支持<code>2.4G</code>以及<code>5G</code>，这要是不能用，多浪费，是吧），不过由于没有配置文件，所以无法正常加载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg | grep -i sdio</span><br><span class="line">[    3.699477] mmc1: new ultra high speed SDR104 SDIO card at address 0001</span><br><span class="line">[    9.911273] Bluetooth: Generic Bluetooth SDIO driver ver 0.1</span><br><span class="line">[   10.107255] brcmfmac: brcmf_fw_map_chip_to_name: using brcm/brcmfmac43455-sdio.bin <span class="keyword">for</span> chip 0x004345(17221) rev 0x000006</span><br><span class="line">[   13.143419] brcmfmac: brcmf_sdio_htclk: HT Avail timeout (1000000): clkctl 0x50</span><br><span class="line">[   14.160121] brcmfmac: brcmf_sdio_htclk: HT Avail timeout (1000000): clkctl 0x50</span><br><span class="line">[   15.164314] brcmfmac: brcmf_sdio_htclk: HT Avail timeout (1000000): clkctl 0x50</span><br></pre></td></tr></table></figure>
<p>并且会提示，无法加载对应的TXT配置。<br>这时候，我们可以将<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZXdpdHQvYW1wYWstZmlybXdhcmUvdHJlZS9tYXN0ZXIvYXA2MjU1">ap6255<i class="fa fa-external-link-alt"></i></span>里面的内容替换至<code>/lib/firmware/brcm/</code>，替换之前记得备份一下哦。替换之后，重启基本上会出现<code>WiFi</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig -a</span><br><span class="line">enx000ec6c95f38: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.237  netmask 255.255.255.0  broadcast 199.168.22.255</span><br><span class="line">        inet6 fe80::20e:c6ff:fec9:5f38  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0e:c6:c9:5f:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 69337  bytes 9711536 (9.7 MB)</span><br><span class="line">        RX errors 0  dropped 2154  overruns 0  frame 0</span><br><span class="line">        TX packets 32668  bytes 2778902 (2.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 2687  bytes 391630 (391.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2687  bytes 391630 (391.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.199  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::13bc:ecb4:3814:e35e  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether c0:84:7d:a5:97:9a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 166  bytes 19597 (19.5 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 65  bytes 7649 (7.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>记得用 <code>ifconfig -a</code>。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab Runner 自动部署</title>
    <url>/2021/01/06/Gitlab%20Runner%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><code>Vue</code> 之类的开发，都需要编译，然后生成编译后的文件，然后打包发布，往往需要好几个步骤，那么我们是否可以让它自动进行，不需要我们人为参与呢？</p>
<p>当然是可以的，借助 <code>CI/CD</code> 工具，我们可以实现自动编译，自动部署。免去人为的干预。</p>
<span id="more"></span>

<p>这里使用 <code>gitlab</code> 仓库与 <code>gitlab runner</code>，搭建方式可以参考 <a href="/2021/08/07/gitlab%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/">gitlab仓库搭建</a></p>
<p>我们需要将<code>gitlab</code> 仓库与 <code>gitlab runner</code>配好，然后在项目的设置里面：<strong>设置=&gt;CI/CD=&gt;变量</strong> 里添加变量，例如这里需要的 <code>ssh 私钥</code>、<code>用户名和服务器地址</code>、<code>服务器路径</code>:</p>
<p>分别配置 ：</p>
<ol>
<li>SSH_PRIVATE_KEY (ssh 私钥)</li>
<li>SERVER_USER_HOST (用户名和服务器地址 例如：user@localhost)</li>
<li>SERVER_MASTER_PATH (服务器路径 例如：/var/www/html/vue)</li>
</ol>
<p><strong>注意：千万千万不要写错变量名</strong></p>
<p>然后为 项目添加 <code>CI/CD</code> 配置:</p>
<p><code>.gitlab-ci.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:10-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$&#123;CI_COMMIT_REF_NAME&#125;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">set</span> <span class="string">registry</span> <span class="string">https://registry.npm.taobao.org</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--progress=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">week</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">node:10-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$&#123;CI_COMMIT_REF_NAME&#125;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job-deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.9/main/&quot;</span> <span class="string">&gt;</span> <span class="string">/etc/apk/repositories</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apk</span> <span class="string">add</span> <span class="string">--no-cache</span> <span class="string">rsync</span> <span class="string">openssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_PRIVATE_KEY&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/id_dsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_dsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;Host *\n\tStrictHostKeyChecking no\n\n&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line">    <span class="bullet">-</span> <span class="comment"># rsync -rav --delete dist/ &quot;$SERVER_USER_HOST:$SERVER_MASTER_PATH&quot; # 把dist/下的所有文件拷贝到$SERVER_MASTER_PATH的路径下，会把原来存在的都删除注意别写错路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-rav</span> <span class="string">dist/</span> <span class="string">&quot;$SERVER_USER_HOST:$SERVER_MASTER_PATH&quot;</span>   <span class="comment"># 将删除参数去掉，默认不删除</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来就可以推送，然后在 gitlab 里面查看进度。</p>
]]></content>
      <categories>
        <category>Gitlab Runner</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>Guacamole 使用</title>
    <url>/2021/03/06/Guacamole%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>使用 docker-compose 使用和管理 Guacamole。</p>
<p>下载 <a href="/files/20210807/Guacamole.tar.gz">Guacamole.tar.gz</a> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://kekxv.github.io/assets/file/Guacamole.tar.gz</span><br><span class="line">$ tar -zxvf Guacamole.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> Guacamole</span><br><span class="line">$ <span class="comment"># 可自行修改 docker-compose.yml 配置</span></span><br><span class="line">$ docker-compose pull</span><br><span class="line">$ <span class="comment"># 启动</span></span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问 <code>Guacamole</code> ；<code>http[s]://域名:18080/guacamole/</code>;</p>
<p><img src="/images/20210807/guacamole.login/img.png" alt="img.png"></p>
<p>默认账号密码为 ： <code>guacadmin</code>/<code>guacadmin</code>。</p>
<p>使用 <code>Ctrl</code>+<code>Alt</code>+<code>Shift</code> (<code>Control</code>+<code>option</code>+<code>Shift</code> )可以呼出菜单，如果使用的<code>ssh</code>协议，能够在菜单内进行上传下载操作。</p>
<span id="more"></span>

<p>附 <code>docker-compose.yml</code> 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">guacd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">guacamole/guacd</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">guacd</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">guacamole:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">guacd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql/mysql-server:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment"># - 3306:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=mysql123</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">guacamole:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">guacamole:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">guacamole/guacamole</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">guacamole</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">guacd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">guacamole:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">guacamole</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_HOSTNAME=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PORT=3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=guacamole</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=guacamole</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=guacamole123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GUACD_HOSTNAME=guacd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GUACD_PORT=4822</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">18080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">guacd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">guacamole:</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Guacamole</category>
      </categories>
      <tags>
        <tag>Guacamole</tag>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 注意事项</title>
    <url>/2021/04/06/Java%20considerations/</url>
    <content><![CDATA[<p>由于一些原因，步入了 <code>Java</code> 开发的大坑。</p>
<span id="more"></span>

<p>怎么说呢，整体还是不错，毕竟用户量庞大，要是不好早就给整放弃了，但是有一点就很难受，环境搭建，虽然现在的环境搭建已经很简单了，但是由于一开始的时候并不熟悉<code>Java</code>的一些注意事项，导致光是搭建环境，就反反复复整了好久（最坑的是啥呢，最后的事实证明，环境最开始的时候就已经是搭建成功了，难受）。</p>
<p>主要表现为：<code>Idea</code> 自动下载<code>jdk</code>搭建，然后可能中途下载断了，还是咋地，然后一直卡死在进度条中。然后取消之后，一下子居然没找到重新下载的地方，难受。</p>
<p>然后就是直接手动安装 <code>jdk</code> （<code>brew install openjdk</code>），重新打开<code>idea</code>之后，识别成功（后来在设置里面找到了下载按钮，并把自带的版本也下载了，还行）。</p>
<p>缓存的坑</p>
<p>好不容易弄完之后，本以为能够愉快的开发了，但是 Java 给我当头一棒，项目依赖于 <code>Maven</code> 管理。然后我们内部有自己的管理服务器，是的，没错，有密码，但是我不知道啊，所以一直授权失败，点了一下链接，打开了浏览器，提示输入账号密码，嗯，好的要密码，行吧，要了一个，终于下载下载了。</p>
<p>下拉项目，开始修改，启动；哎？怎么修改没生效？哎，断点怎么好像哪里不对？是不是我环境没弄好？重新再配置一次（x N次）。</p>
<p>好吧，好像不是环境的问题，要不试试 <code>mvn package</code> ？那就试试，然后生效了。<br>emmmmmm，行吧。</p>
<p>总的来说吧， Java 还是不错的，但是对新人不太友好（个人认为），新进入 Java的话，有几点注意的是：</p>
<ol>
<li>尽量用 <code>IntelliJ IDEA</code> ，自动化配置真的不是一般的简单。</li>
<li>正常情况 <code>IntelliJ IDEA</code> 的环境没啥问题，估计都是缓存或者 <code>maven</code> 之类的问题。</li>
<li>做<code>maven</code>项目的时候，改完记得 <code>mvn package</code> 一下，不然修改可能不生效。</li>
<li>如果 <code>mvn package</code> 的时候，提示项目里面的某个<code>maven</code>项目包未找到，试试 对未找到的项目包执行 <code>mvn install</code> 。</li>
<li>如果提示某些动态库未找到，可以试试将动态库放到系统动态库目录或者 <code>jdk</code> 目录。</li>
<li>实在不行找别人帮助一下，毕竟，你的时间很宝贵。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains Idea 开源授权申请(转载)</title>
    <url>/2021/01/06/JetBrains%20open%20source%20authorization(reproduced)/</url>
    <content><![CDATA[<p>JetBrains 公司旗下的 IDEA 功能都十分强大，深受各种编程语言相关的程序员的喜爱，IDEA提供有免费版本的也有付费版本的，但功能差距还是相差不小，作为手头不太宽裕，拥有开源项目但是想使用完整版本的开发人员来说，可以尝试申请开源软件授权，一般项目有一定意义，都是可以进行申请的。</p>
<p>此为转载文章，进行修改和删减，想查看原文，请点击连接 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZXZlbnlhby9wLzEwMjkwNDgyLmh0bWw=">https://www.cnblogs.com/evenyao/p/10290482.html<i class="fa fa-external-link-alt"></i></span> 。(本文末会标明原文声明)。</p>
<span id="more"></span>

<p>我是用过<code>Clion</code>、<code>WebStorm</code>、<code>PhpStorm</code>、<code>idea</code>以及<code>android studio</code>等，个人觉得很好用，<del>就是有点费内存</del>。</p>
<p>正常情况下 <code>JetBrains</code> 公司的每个 <code>IDE</code> 分为<code>Ultimate</code>（企业付费版本）和<code>Community</code>（社区免费）两个版本。实际开发中大多数人都是使用、或希望使用 <code>Ultimate</code> 版本，因为它功能全面且完善，由于黑科技盛行，包括我在内的大多数人都是曾使用的河蟹破解版的 <code>Ultimate</code> 版本。</p>
<p>在去年年底的时候，我在某个开源社区了解到 JetBrains 公司为了表达对开源项目的支持。只要你拥有一个符合条件的开源项目，你或者你的团队就可以免费使用 JetBrains 公司旗下所有的 Ultimate 版本的 IDE 开发工具，即全家桶的使用权 1 年，如果到期了还可以继续申请。</p>
<p>大致的开源项目要求是这个样子的：</p>
<ol>
<li>你必须是项目的发起人或是活跃的 commiter</li>
<li>你的项目需要积极开发 3 个月以上</li>
<li>定期发布版本</li>
<li>符合开源的定义，不能包含有关商业性质的内容</li>
</ol>
<h1 id="如何申请"><a href="#如何申请" class="headerlink" title="如何申请"></a>如何申请</h1><p>通过 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9zaG9wL2Vmb3JtL29wZW5zb3VyY2U/cHJvZHVjdD1BTEw=">JetBrains 官方<i class="fa fa-external-link-alt"></i></span> 提供的申请链接，可以进行开源许可证的申请。按照要求填写表单并提交即可。</p>
<p>通过上面的申请地址，我进行了开源许可证的申请，按照所提到的消息，剩下的我只需要等待就 OK 了。我用来申请的开源项目是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V2ZW55YW8vR2VhckNhc2U="> GearCase UI <i class="fa fa-external-link-alt"></i></span> (<code>此项目为原作者的项目</code>)。</p>
<h1 id="邮箱公开"><a href="#邮箱公开" class="headerlink" title="邮箱公开"></a>邮箱公开</h1><p>需要将 Github 个人信息中的 Email 公开，方便确认该项目的确是作为主要开发者。</p>
<h1 id="原文版权信息"><a href="#原文版权信息" class="headerlink" title="原文版权信息"></a>原文版权信息</h1><blockquote>
<p>作者：evenyao</p>
<p>出处：<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9ldmVueWFvLw==">http://www.cnblogs.com/evenyao/<i class="fa fa-external-link-alt"></i></span></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。</p>
</blockquote>
]]></content>
      <categories>
        <category>Reprint</category>
      </categories>
      <tags>
        <tag>Reprint</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux GTK+-3 Demo</title>
    <url>/2021/02/06/Linux%20gtk+%20demo/</url>
    <content><![CDATA[<p>GTK是一款开源的、面向多平台的GUI工具箱，其英文全称为GIMP Toolkit。最初是Peter Mattis 和 Spencer Kimball 为GNU Image Manipulation Program (GIMP)编写。在后续的发展中，它已经成为通用的GUI库，应用于越来越多的程序，Linux平台的图形应用程序的半壁江山都是使用GTK编写的。</p>
<span id="more"></span>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>目前GTK已经基本稳定，然而由于越来越多的其他GUI库出现，以及HTML5的统治，目前GTK系列的需求已经较少。</p>
<p>在比较早之前，就一直在关注GTK，然后当年水平有限，以及精力以及方向并不在这方面，所以也就并没有怎么了解以及使用，最近有个项目需要用到界面，然后为了方便调试（主要是开发电脑与实际电脑不在同一设备上，也不是同一架构，不想要来回跑动，所以使用了SSH X11 转发，而GTK可以很好地支持）。</p>
<p>废话不多说，上代码看看：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by caesar kekxv on 2020/3/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(LINUX) || defined(linux)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;X11/Xlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;getopt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X_WIDTH       =   <span class="number">640</span>;</span><br><span class="line"><span class="keyword">int</span> X_HEIGHT      =   <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line">VideoCapture cap;</span><br><span class="line">cv::Mat last_frame;</span><br><span class="line"><span class="keyword">int</span> fps = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否关闭</span></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; stoped&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">GMutex _mutex;</span><br><span class="line">std::thread video_task;</span><br><span class="line"></span><br><span class="line">GtkWidget *image = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">/* Surface to store current scribbles */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">cairo_surface_t</span> *surface = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenCV Mat 格式转换为 GTK GdkPixbuf 格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">GdkPixbuf *<span class="title">MatToGdkPixbuf</span><span class="params">(Mat inMat)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// IplImage -&gt; GdkPixbuf</span></span><br><span class="line">    GdkPixbuf *src = <span class="built_in">gdk_pixbuf_new_from_data</span>(</span><br><span class="line">            (<span class="keyword">const</span> guchar *) inMat.data, GDK_COLORSPACE_RGB, <span class="literal">false</span>, <span class="number">8</span>, inMat.<span class="built_in">size</span>().width, inMat.<span class="built_in">size</span>().height, inMat.step, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清理画布</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear_surface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (surface == <span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">cairo_t</span> *cr;</span><br><span class="line">    cr = <span class="built_in">cairo_create</span>(surface);</span><br><span class="line">    <span class="built_in">cairo_set_source_rgb</span>(cr, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cairo_paint</span>(cr);</span><br><span class="line">    <span class="built_in">cairo_destroy</span>(cr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create a new surface of the appropriate size to store our scribbles */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">configure_event_cb</span><span class="params">(GtkWidget *widget,</span></span></span><br><span class="line"><span class="params"><span class="function">                   GdkEventConfigure *event,</span></span></span><br><span class="line"><span class="params"><span class="function">                   gpointer data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (surface)</span><br><span class="line">        <span class="built_in">cairo_surface_destroy</span>(surface);</span><br><span class="line">    surface = <span class="built_in">gdk_window_create_similar_surface</span>(<span class="built_in">gtk_widget_get_window</span>(widget),</span><br><span class="line">                                                CAIRO_CONTENT_COLOR,</span><br><span class="line">                                                <span class="built_in">gtk_widget_get_allocated_width</span>(widget),</span><br><span class="line">                                                <span class="built_in">gtk_widget_get_allocated_height</span>(widget));</span><br><span class="line">    <span class="comment">/* Initialize the surface to white */</span></span><br><span class="line">    <span class="built_in">clear_surface</span>();</span><br><span class="line">    <span class="comment">/* We&#x27;ve handled the configure event, no need for further processing. */</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭窗口释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close_window</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// std::unique_lock&lt;std::mutex&gt; _lock&#123;m_lock&#125;;</span></span><br><span class="line">    <span class="keyword">if</span> (surface)</span><br><span class="line">        <span class="built_in">cairo_surface_destroy</span>(surface);</span><br><span class="line">    surface = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Redraw the screen from the surface. Note that the ::draw</span></span><br><span class="line"><span class="comment"> * signal receives a ready-to-be-used cairo_t that is already</span></span><br><span class="line"><span class="comment"> * clipped to only draw the exposed areas of the widget</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">draw_event</span><span class="params">(GtkWidget *widget, <span class="keyword">cairo_t</span> *cr)</span> </span>&#123;</span><br><span class="line">    GdkWindow *win;</span><br><span class="line">    win = <span class="built_in">gtk_widget_get_window</span>(widget);</span><br><span class="line">    <span class="built_in">g_mutex_lock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span> (!last_frame.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> src = <span class="built_in">MatToGdkPixbuf</span>(last_frame);</span><br><span class="line">        <span class="built_in">g_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">gdk_cairo_set_source_pixbuf</span>(cr, src, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cairo_paint</span>(cr);</span><br><span class="line">        <span class="built_in">cairo_fill</span>(cr);</span><br><span class="line">        <span class="built_in">g_object_unref</span>(src);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">g_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenCV 摄像头 线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">video_task_run</span><span class="params">(GtkWidget *_image)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stoped.<span class="built_in">load</span>() &amp;&amp; cap.<span class="built_in">isOpened</span>()) &#123;</span><br><span class="line">        Mat frame;</span><br><span class="line">        cap &gt;&gt; frame;</span><br><span class="line">        <span class="keyword">if</span> (frame.<span class="built_in">empty</span>())<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">resize</span>(frame, frame, <span class="built_in">Size</span>(X_WIDTH, X_HEIGHT));</span><br><span class="line">        <span class="built_in">cvtColor</span>(frame, frame, COLOR_BGR2RGB);</span><br><span class="line">        <span class="keyword">if</span> (surface == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">1000</span> / fps * <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// GTK 锁</span></span><br><span class="line">        <span class="built_in">g_mutex_lock</span>(&amp;_mutex);</span><br><span class="line">        <span class="keyword">if</span> (surface == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">g_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last_frame = frame;</span><br><span class="line">        <span class="comment">// 信号通知</span></span><br><span class="line">        <span class="built_in">g_idle_add</span>((GSourceFunc) gtk_widget_queue_draw, (<span class="keyword">void</span> *) _image);</span><br><span class="line">        <span class="comment">// gdk_threads_add_idle((GSourceFunc) gtk_widget_queue_draw, (void *) _image);</span></span><br><span class="line">        <span class="built_in">g_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">1000</span> / fps * <span class="number">800</span>);</span><br><span class="line">        <span class="built_in">g_idle_remove_by_data</span>((<span class="keyword">void</span> *) _image);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// logger::instance()-&gt;d(__FILENAME__, __LINE__, &quot;视频读取完毕&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">(GtkApplication *app, gpointer user_data)</span> </span>&#123;</span><br><span class="line">    GtkWidget *window;</span><br><span class="line">    window = <span class="built_in">gtk_application_window_new</span>(app);</span><br><span class="line">    <span class="built_in">gtk_window_set_title</span>(<span class="built_in">GTK_WINDOW</span> (window), <span class="string">&quot;Window&quot;</span>);</span><br><span class="line">    <span class="built_in">gtk_window_set_default_size</span>(<span class="built_in">GTK_WINDOW</span> (window), X_WIDTH, X_HEIGHT);</span><br><span class="line">    <span class="built_in">gtk_window_set_position</span>( <span class="built_in">GTK_WINDOW</span>(window), GTK_WIN_POS_CENTER_ALWAYS );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">g_signal_connect</span> (window, <span class="string">&quot;destroy&quot;</span>, <span class="built_in">G_CALLBACK</span>(close_window), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    image = <span class="built_in">gtk_drawing_area_new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gtk_widget_set_size_request</span>(image, X_WIDTH, X_HEIGHT);</span><br><span class="line">    <span class="built_in">gtk_container_add</span>(<span class="built_in">GTK_CONTAINER</span> (window), image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Signals used to handle the backing surface */</span></span><br><span class="line">    <span class="built_in">g_signal_connect</span> (image, <span class="string">&quot;draw&quot;</span>,</span><br><span class="line">                      <span class="built_in">G_CALLBACK</span>(draw_event), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">g_signal_connect</span> (image, <span class="string">&quot;configure-event&quot;</span>,</span><br><span class="line">                      <span class="built_in">G_CALLBACK</span>(configure_event_cb), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    video_task = <span class="built_in">thread</span>(video_task_run, image);</span><br><span class="line">    video_task.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gtk_widget_show_all</span>(window);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(LINUX) || defined(linux)</span></span><br><span class="line">    <span class="built_in">setenv</span>(<span class="string">&quot;DISPLAY&quot;</span>, <span class="string">&quot;localhost:10.0&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// setenv(&quot;DISPLAY&quot;, &quot;:1&quot;, 1);</span></span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">i</span>(__FILENAME__, __LINE__, <span class="string">&quot;XOpenDisplay : %s&quot;</span>, <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>) ? <span class="string">&quot;True&quot;</span> : <span class="string">&quot;False&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    cap.<span class="built_in">open</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cap.<span class="built_in">isOpened</span>()) &#123;</span><br><span class="line">        fps = cap.<span class="built_in">get</span>(CAP_PROP_FPS);</span><br><span class="line">        X_WIDTH = cap.<span class="built_in">get</span>(CAP_PROP_FRAME_WIDTH);</span><br><span class="line">        X_HEIGHT = cap.<span class="built_in">get</span>(CAP_PROP_FRAME_HEIGHT);</span><br><span class="line">        cap.<span class="built_in">read</span>(last_frame);</span><br><span class="line">    &#125;</span><br><span class="line">    GtkApplication *app;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    app = <span class="built_in">gtk_application_new</span>(<span class="string">&quot;com.example&quot;</span>, G_APPLICATION_FLAGS_NONE);</span><br><span class="line">    <span class="built_in">g_signal_connect</span> (app, <span class="string">&quot;activate&quot;</span>, <span class="built_in">G_CALLBACK</span>(activate), <span class="literal">NULL</span>);</span><br><span class="line">    status = <span class="built_in">g_application_run</span>(<span class="built_in">G_APPLICATION</span> (app), <span class="number">1</span>, argv);</span><br><span class="line">    <span class="built_in">g_object_unref</span>(app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果有什么错误或者不明白的地方，<del>可以留言告诉我</del> <code>github</code> 提 <code>issue</code>。</p>
]]></content>
      <categories>
        <category>gtk</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>gtk</tag>
      </tags>
  </entry>
  <entry>
    <title>MFC OCX 开发一些注意事项</title>
    <url>/2021/05/06/MFC%20OCX%20%E5%BC%80%E5%8F%91%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>由于一些原因，居然开始 MFC OCX 的开发，这都是淘汰了多久的玩意了啊，心塞。</p>
<p>MFC 如何进行 OCX 开发不在本文讨论之内，可以参考一下这些内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hrY3Nkbi9hcnRpY2xlL2RldGFpbHMvNTI5MDg3NDg=">MFC ActiveX (ocx)控件的开发<i class="fa fa-external-link-alt"></i></span>， <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODIxNTM5NS9hcnRpY2xlL2RldGFpbHMvNzk3MTgzNTM=">MFC .ocx控件开发<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9bWZjKyVFNSVCQyU4MCVFNSU4RiU5MW9jeA==">mfc 开发ocx<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>

<h2 id="OCX-加载失败问题"><a href="#OCX-加载失败问题" class="headerlink" title="OCX 加载失败问题"></a>OCX 加载失败问题</h2><p>如果 OCX 莫名其妙加载失败，主要表现为，在 <code>ie</code> 无论调用那个函数，都会提示 没有该方法，则很有可能 OCX 加载失败了，可以检查一下两个方面：</p>
<ol>
<li>是否注册：<code>regsvr32 OCX路径</code>(卸载命令：<code>regsvr32 /u  OCX路径</code>)</li>
<li>依赖的 dll 是否完整。</li>
</ol>
<h2 id="OCX-事件回调"><a href="#OCX-事件回调" class="headerlink" title="OCX 事件回调"></a>OCX 事件回调</h2><pre><code>有些情况下，我们需要OCX 进行一些耗时间的操作，但是又不想卡死UI，这时候我们可以注册事件回调，等处理好之后，再通过事件回调进行通知UI：这里有几个地方需要注意的：
</code></pre>
<ol>
<li><p>需要添加消息映射</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件映射</span></span><br><span class="line"><span class="built_in">BEGIN_EVENT_MAP</span>(CVideoShowOCXCtrl, COleControl)</span><br><span class="line"><span class="built_in">EVENT_STOCK_READYSTATECHANGE</span>()</span><br><span class="line"><span class="comment">// 注册 onComplete 的事件映射</span></span><br><span class="line"><span class="built_in">EVENT_CUSTOM_ID</span>(<span class="string">&quot;onComplete&quot;</span>, eventidComplete, Complete, VTS_BSTR)</span><br><span class="line"><span class="built_in">END_EVENT_MAP</span>()</span><br></pre></td></tr></table></figure></li>
<li><p>调用方式</p>
<p> 通过 <code>FireEvent</code> 进行触发事件映射</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">FireEvent</span>(eventidComplete, <span class="built_in">EVENT_PARAM</span>(VTS_BSTR), data);</span><br></pre></td></tr></table></figure></li>
<li><p>开放端口</p>
<p> 如果只是进行了1、2步骤，那么事件是无法触发的，还需要对 <code>*.idl : ActiveX 控件项目的类型库源</code> 进行编辑，增加暴露</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  CVideoShowOCXCtrl 的事件调度接口</span></span><br><span class="line">    </span><br><span class="line">[ </span><br><span class="line">    <span class="built_in">uuid</span>(*******-****-****-****-***********)	</span><br><span class="line">]</span><br><span class="line">dispinterface _DVideoShowOCXEvents</span><br><span class="line">&#123;</span><br><span class="line">    properties:</span><br><span class="line">        <span class="comment">//  事件接口没有任何属性</span></span><br><span class="line">    </span><br><span class="line">    methods:</span><br><span class="line">        <span class="comment">// 增加 onComplete 的暴露</span></span><br><span class="line">        [<span class="built_in">id</span>(<span class="number">1</span>)] <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>在IE中的使用方式</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--回调函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;javascript&#x27;</span> <span class="attr">for</span>=<span class="string">&quot;object_id&quot;</span> <span class="attr">event</span>=<span class="string">&quot;onComplete(data)&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 参数为 data</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Works on  IE11</span></span></span><br><span class="line"><span class="javascript">    Complete(data);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用统一的函数进行处理</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Complete</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// IE 11 以下</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">        object_id.attachEvent(<span class="string">&quot;onComplete&quot;</span>, Complete, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 需要注意的是，这玩意在 <code>IE</code> 不一样的版本下面还有区别；最好将两种方式都进行实现。</p>
</li>
</ol>
<h2 id="多线程进行事件回调"><a href="#多线程进行事件回调" class="headerlink" title="多线程进行事件回调"></a>多线程进行事件回调</h2><p>就像前面说的，通过 <code>FireEvent</code> 进行触发事件映射，但是问题是，多线程的情况下，这个是也是无效的，所以需要想办法使用主线程（UI线程）通过 <code>FireEvent</code> 进行触发事件映射，比较简单的方式就是消息通知的方式，可以通过<code>PostMessage</code>发送消息给主线程，让主线程进行操作，数据的话，可以通过全局变量（记得加锁读写）进行共享。</p>
<p>这玩意也需要进行注意：</p>
<ol>
<li><p>继承函数</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要使用消息推送，必须使用继承该函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Ctrl::OnSetClientSite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// It doesn&#x27;t matter who the parent window is or what the size of</span></span><br><span class="line">    <span class="comment">// the window is because the control&#x27;s window will be reparented</span></span><br><span class="line">    <span class="comment">// and resized correctly later when it&#x27;s in-place activated.</span></span><br><span class="line">    <span class="keyword">if</span> (m_pClientSite)</span><br><span class="line">        <span class="built_in">VERIFY</span>(<span class="built_in">CreateControlWindow</span>(::<span class="built_in">GetDesktopWindow</span>(), <span class="built_in">CRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">CRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)));</span><br><span class="line">    COleControl::<span class="built_in">OnSetClientSite</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 使用消息推送，必须继承 <code>OnSetClientSite</code> 函数，否则还是无效，emmmmmm。</p>
</li>
<li><p>注册消息推送处理函数</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息映射</span></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CVideoShowOCXCtrl, COleControl)</span><br><span class="line">    <span class="built_in">ON_OLEVERB</span>(AFX_IDS_VERB_PROPERTIES, OnProperties)</span><br><span class="line">    <span class="comment">// 注册消息 id = WM_USER + 100 使用 OnFinishPublic 处理</span></span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER + <span class="number">100</span>, OnFinishPublic)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"><span class="comment">// OnFinishPublic 定义可以参考以下</span></span><br><span class="line"><span class="function">afx_msg LRESULT <span class="title">OnFinishPublic</span><span class="params">(WPARAM wParam, LPARAM lParam)</span>；</span></span><br></pre></td></tr></table></figure></li>
<li><p>PostMessage 参数</p>
<p> 使用消息推送的时候，第一个参数可以使用 内部变量 <code>m_hWnd</code> 或者使用：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cWnd == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cWnd = <span class="built_in">GetActiveWindow</span>();</span><br><span class="line">        hWnd = cWnd-&gt;<span class="built_in">GetSafeHwnd</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> 或者，看需求情况自己选择。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前发现的坑就是这些，其它的如果有的话，以后再说吧。</p>
]]></content>
      <categories>
        <category>MFC</category>
      </categories>
      <tags>
        <tag>MFC</tag>
        <tag>ocx</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net 开发工具推荐：Rider</title>
    <url>/2021/02/06/Net%20ide%20Rider/</url>
    <content><![CDATA[<p>一般情况下来说，我们开发<code>c#</code>、<code>.net</code>软件的时候，都会使用<code>vs(Microsoft Visual Studio)</code>，进行开发，但是如果我们的主系统为<code>Unix</code>系列并且习惯了<code>idea</code>系列IDE的话，使用<code>VS</code>还需要开一个虚拟机，或者下载对应版本的<code>VS</code>。<br>但我更喜欢使用 <code>idea</code> 系列的<code>Rider</code>进行开发。</p>
<p><img src="/images/20210807/WX20201125-142020@2x.png" alt="Rider 启动图"></p>
<p><code>Rider</code> 的整个风格可以选择与<code>vs(Microsoft Visual Studio)</code>一致或者使用传统的<code>Intellij</code>主题风格。能够直接打开 <code>c#</code> 的 <code>sln</code> 格式项目，与<code>vs</code>兼容，和别人合作开发或者多机器开发测试的情况下比较方便。</p>
<p><code>Rider</code> 在安装的时候需要选择希望支持的 <code>.net</code> 宿主，我这边使用的是 <code>mono</code>，编译起来没有问题<del>（不过可能由于我的原项目是<code>vs</code>开发且依赖了<code>WinApi</code>以及部分Windows动态库，所以没完整跑起来，会报错，啧<del>\</del>~。）</del>；</p>
<p>由于我的系统是<code>Unix</code>系列，以往使用<code>vs(Microsoft Visual Studio)</code>还需要使用<code>Windows</code>虚拟机，然，我主机总共才<code>8G</code>内存，导致开了虚拟机经常告警闪退，难受的不行！！！！</p>
<p>如果你的情况和我的差不多，我建议试试<code>Rider</code>，真不错🐩</p>
]]></content>
      <categories>
        <category>Rider</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>Rider</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV ORB 模板匹配</title>
    <url>/2021/08/02/OpenCV%20ORB%20%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>在某些情况下，我们需要用一个已知的物体，在一个场景内进行匹配，比如有一张身份证，然后想要在桌子上找到他的位置。比如以下两张图片：</p>
<blockquote>
<p>身份证图片：</p>
<img src="/images/20210807/12/201912181125218966050.jpg" alt="韦小宝" width="300" />

<p>桌子图片：</p>
<img src="/images/20210807/12/201912181127039744167.jpg" alt="韦小宝桌子" width="400" />

<p>(什么？没有桌子？哦，不要在意这些细节问题，嗯。)</p>
</blockquote>
<p>如果想要从其中桌子图片找到身份证图片的话，我们可以使用 OpenCV 的 ORB特征检测器（SIFT和SURF已获得专利，如果要在实际应用中使用它，则需要支付许可费，而 ORB 速度和性能也不差）。</p>
<span id="more"></span>

<h1 id="ORB-的意义"><a href="#ORB-的意义" class="headerlink" title="ORB 的意义"></a>ORB 的意义</h1><p>ORB代表“定向FAST”和“旋转简报”。让我们看看FAST和Brief的含义。</p>
<p>特征点检测器分为两部分</p>
<ol>
<li><p>定位器：标识图像上在图像转换（例如平移（移位），缩放（大小增加/减小）和旋转）下稳定的点。定位器找到这些点的x，y坐标。ORB检测器使用的定位器称为FAST。</p>
</li>
<li><p>描述符：上一步中的定位器仅告诉我们有趣的地方在哪里。特征检测器的第二部分是描述符，该描述符对点的外观进行编码，以便我们可以区分一个特征点。在特征点评估的描述符只是一个数字数组。理想情况下，两个图像中的相同物理点应具有相同的描述符。ORB使用称为BRISK的功能描述符的修改版本。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">节选自 https://www.learnopencv.com/image-alignment-feature-based-using-opencv-c-python/</span><br><span class="line">更加详细的介绍请看原文。</span><br></pre></td></tr></table></figure>

<h1 id="寻找关键点"><a href="#寻找关键点" class="headerlink" title="寻找关键点"></a>寻找关键点</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Variables to store keypoints and descriptors</span></span><br><span class="line">std::vector&lt;KeyPoint&gt; keypoints1, keypoints2;</span><br><span class="line">Mat descriptors1, descriptors2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detect ORB features and compute descriptors.</span></span><br><span class="line">Ptr&lt;Feature2D&gt; orb = ORB::<span class="built_in">create</span>(MAX_FEATURES);</span><br><span class="line">orb-&gt;<span class="built_in">detectAndCompute</span>(im1Gray, <span class="built_in">Mat</span>(), keypoints1, descriptors1);</span><br><span class="line">orb-&gt;<span class="built_in">detectAndCompute</span>(im2Gray, <span class="built_in">Mat</span>(), keypoints2, descriptors2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Match features.</span></span><br><span class="line">std::vector&lt;DMatch&gt; matches;</span><br><span class="line">Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line">matcher-&gt;<span class="built_in">match</span>(descriptors1, descriptors2, matches, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort matches by score</span></span><br><span class="line">std::<span class="built_in">sort</span>(matches.<span class="built_in">begin</span>(), matches.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// Remove not so good matches</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> numGoodMatches = matches.<span class="built_in">size</span>() * GOOD_MATCH_PERCENT;</span><br><span class="line">matches.<span class="built_in">erase</span>(matches.<span class="built_in">begin</span>() + numGoodMatches, matches.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw top matches</span></span><br><span class="line">Mat imMatches;</span><br><span class="line"><span class="built_in">drawMatches</span>(im1, keypoints1, im2, keypoints2, matches, imMatches);</span><br></pre></td></tr></table></figure>

<p>关键点匹配图：<br><img src="/images/20210807/12/20191218120115157664167511771.jpg" alt="关键点匹配图" title="关键点匹配图"></p>
<h1 id="寻找目标"><a href="#寻找目标" class="headerlink" title="寻找目标"></a>寻找目标</h1><p>通过匹配特征点寻找目标</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Extract location of good matches</span></span><br><span class="line">std::vector&lt;Point2f&gt; points1, points2;</span><br><span class="line"><span class="keyword">if</span> (matches.<span class="built_in">empty</span>())<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; matches.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">points1.<span class="built_in">push_back</span>(keypoints1[matches[i].queryIdx].pt);</span><br><span class="line">points2.<span class="built_in">push_back</span>(keypoints2[matches[i].trainIdx].pt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find homography</span></span><br><span class="line">h = <span class="built_in">findHomography</span>(points1, points2, RANSAC);</span><br><span class="line"></span><br><span class="line">Mat img_matches = imMatches.<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;Point2f&gt; <span class="title">obj_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">obj_corners[<span class="number">0</span>] = <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">obj_corners[<span class="number">1</span>] = <span class="built_in">Point</span>(im1.cols, <span class="number">0</span>);</span><br><span class="line">obj_corners[<span class="number">2</span>] = <span class="built_in">Point</span>(im1.cols, im1.rows);</span><br><span class="line">obj_corners[<span class="number">3</span>] = <span class="built_in">Point</span>(<span class="number">0</span>, im1.rows);</span><br><span class="line"><span class="function">std::vector&lt;Point2f&gt; <span class="title">scene_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="built_in">perspectiveTransform</span>(obj_corners, scene_corners, h);</span><br><span class="line"><span class="comment">//-- Draw lines between the corners (the mapped object in the scene - image_2 )</span></span><br><span class="line"><span class="function">Point2f <span class="title">offset</span><span class="params">((<span class="keyword">float</span>) im1.cols, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="built_in">line</span>(img_matches, scene_corners[<span class="number">0</span>] + offset, scene_corners[<span class="number">1</span>] + offset, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>);</span><br><span class="line"><span class="built_in">line</span>(img_matches, scene_corners[<span class="number">1</span>] + offset, scene_corners[<span class="number">2</span>] + offset, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>);</span><br><span class="line"><span class="built_in">line</span>(img_matches, scene_corners[<span class="number">2</span>] + offset, scene_corners[<span class="number">3</span>] + offset, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>);</span><br><span class="line"><span class="built_in">line</span>(img_matches, scene_corners[<span class="number">3</span>] + offset, scene_corners[<span class="number">0</span>] + offset, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use homography to warp image</span></span><br><span class="line"><span class="built_in">warpPerspective</span>(im1, im1Reg, h, im2.<span class="built_in">size</span>());</span><br></pre></td></tr></table></figure>
<p>目标查找图：<br><img src="/images/20210807/12/201912181256198502308.jpg" alt="目标查找图" title="目标查找图"></p>
<p>通过结果可以发现，已经能够桌子上找到身份证了。</p>
<p>从代码可以看到：<br><code>perspectiveTransform(obj_corners, scene_corners, h);</code><br>可以为我们得到目标的四个顶点坐标，剩下的事情，你知道怎么做的了吧。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>以上内容基本上参考自文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL2ltYWdlLWFsaWdubWVudC1mZWF0dXJlLWJhc2VkLXVzaW5nLW9wZW5jdi1jLXB5dGhvbi8=">https://www.learnopencv.com/image-alignment-feature-based-using-opencv-c-python/<i class="fa fa-external-link-alt"></i></span> 作者是：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL2Fib3V0Lw==">萨蒂亚·马利克（SATYA MALLICK）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 调用webservice</title>
    <url>/2021/06/06/PHP%20%E8%B0%83%E7%94%A8webservice/</url>
    <content><![CDATA[<p>很多时候，我们需要调用第三方的接口，例如使用 <code>PHP</code>调用 <code>webservice</code> 接口。</p>
<p>关于 <code>webservice</code> 接口，我们可以直接使用<code>SoapUi</code>查看或者像对方索要具体地址函数以及参数。</p>
<p>在<code>PHP</code>里面调用的话，可以使用 <code>SoapClient</code>，一般<code>PHP</code>都会开启该扩展，并且相对也比较简单。</p>
<span id="more"></span>

<h1 id="定义一个SoapClient对象："><a href="#定义一个SoapClient对象：" class="headerlink" title="定义一个SoapClient对象："></a>定义一个<code>SoapClient</code>对象：</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决OpenSSL Error问题需要加第二个array参数，具体参考 http://stackoverflow.com/questions/25142227/unable-to-connect-to-wsdl</span></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> SoapClient(<span class="string">&quot;webservice地址?wsdl&quot;</span>,</span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;stream_context&quot;</span> =&gt; stream_context_create(</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">&#x27;ssl&#x27;</span> =&gt; [<span class="string">&#x27;verify_peer&#x27;</span> =&gt; <span class="literal">false</span>,<span class="string">&#x27;verify_peer_name&#x27;</span> =&gt; <span class="literal">false</span>,]</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h1 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h1><p>调用方式可以直接使用箭头(→)方式调用，注意保证函数名以及参数正确:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$parm</span> = [<span class="string">&#x27;参数&#x27;</span> =&gt; <span class="string">&quot;参数值&quot;</span>];<span class="comment">// 可多个参数</span></span><br><span class="line"><span class="comment">//SendPersonMMS 为函数名</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$client</span>-&gt;SendPersonMMS(<span class="variable">$parm</span>);</span><br><span class="line"><span class="comment">//输出结果 </span></span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure>

<p>#完整代码 </p>
<p>完整的操作为：（ 参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzYyMTIxNDMuaHRtbA==">https://www.cnblogs.com/xjnotxj/p/6212143.html<i class="fa fa-external-link-alt"></i></span> ）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决OpenSSL Error问题需要加第二个array参数，具体参考 http://stackoverflow.com/questions/25142227/unable-to-connect-to-wsdl</span></span><br><span class="line">    <span class="variable">$client</span> = <span class="keyword">new</span> SoapClient(<span class="string">&quot;http://XXX/webservice/mmsservice.asmx?wsdl&quot;</span>,</span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;stream_context&quot;</span> =&gt; stream_context_create(</span><br><span class="line">                <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;ssl&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&#x27;verify_peer&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                        <span class="string">&#x27;verify_peer_name&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//print_r($client-&gt;__getFunctions());</span></span><br><span class="line">    <span class="comment">//print_r($client-&gt;__getTypes());</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$parm</span> = <span class="keyword">array</span>(<span class="string">&#x27;mobile&#x27;</span> =&gt; ‘<span class="number">136</span>XXXXXX’, <span class="string">&#x27;mmsid&#x27;</span> =&gt; <span class="string">&#x27;XXX&#x27;</span>, <span class="string">&#x27;sToken&#x27;</span> =&gt; <span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$client</span>-&gt;SendPersonMMS(<span class="variable">$parm</span>);</span><br><span class="line">    <span class="comment">//print_r($result);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将stdclass object的$result转换为array</span></span><br><span class="line">    <span class="variable">$result</span> = get_object_vars(<span class="variable">$result</span>);  </span><br><span class="line">    <span class="comment">//输出结果 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>[<span class="string">&quot;SendPersonMMSResult&quot;</span>];</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SOAPFault <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="XML-格式"><a href="#XML-格式" class="headerlink" title="XML 格式"></a><code>XML</code> 格式</h1><p>如果使用<code>XML</code>格式，还可以使用 <code>DOMDocument</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$books</span> = <span class="keyword">new</span> DOMDocument();</span><br><span class="line"><span class="variable">$WsSubmitReq</span> = <span class="variable">$books</span>-&gt;createElement(<span class="string">&quot;参数&quot;</span>);</span><br><span class="line"><span class="variable">$WsSubmitReq</span>-&gt;appendChild(<span class="variable">$books</span>-&gt;createElement(<span class="string">&quot;参数&quot;</span>, <span class="string">&quot;值&quot;</span>));</span><br><span class="line"><span class="variable">$WsSubmitReq</span>-&gt;appendChild(<span class="variable">$books</span>-&gt;createElement(<span class="string">&quot;mobile&quot;</span>, <span class="variable">$PHONE</span>));</span><br><span class="line"><span class="variable">$WsSubmitReq</span>-&gt;appendChild(<span class="variable">$books</span>-&gt;createElement(<span class="string">&quot;content&quot;</span>, <span class="variable">$SmsMessage</span>));</span><br><span class="line"><span class="variable">$books</span>-&gt;appendChild(<span class="variable">$WsSubmitReq</span>);</span><br><span class="line"><span class="variable">$parm</span> = <span class="keyword">array</span>(<span class="string">&#x27;参数&#x27;</span> =&gt; <span class="variable">$books</span>-&gt;saveXML());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>序列化的内容可保证正确无误，并且会自动转码。</p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>webservice</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows自带的端口转发</title>
    <url>/2021/08/07/Port%20forwarding%20that%20comes%20with%20Windows/</url>
    <content><![CDATA[<p>通过 <code>Windows</code> 实现端口转发。本文为参考转发文章</p>
<p>使用<code>Portproxy</code>模式下的<code>Netsh</code>命令即能实现<code>Windows</code>系统中的端口转发，转发命令如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=[localaddress] listenport=[localport] connectaddress=[destaddress]</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p>解释一下这其中的参数意义</p>
<ol>
<li><code>listenaddress</code> – 等待连接的本地ip地址</li>
<li><code>listenport</code> – 本地监听的TCP端口（待转发）</li>
<li><code>connectaddress</code> – 被转发端口的本地或者远程主机的ip地址</li>
<li><code>connectport</code> – 被转发的端口</li>
</ol>
<p>举个例子，服务器内网IP是<code>172.16.0.4</code>，需要将<code>8080</code>端口转发到国外服务器<code>104.104.104.104</code>的<code>9999</code>端口，那么命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4  listenaddress=172.16.0.4 listenport=8080 connectaddress=104.104.104.104 connectport=9999</span><br></pre></td></tr></table></figure>

<p>下面的命令是用来展示系统中的所有转发规则：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface  portproxy show  v4tov4</span><br></pre></td></tr></table></figure>

<p>删除刚才创建的那个转发的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface  portproxy delete v4tov4 listenaddress=172.16.0.4 listenport=8080</span><br></pre></td></tr></table></figure>

<p>注意：连接时请确保防火墙（<code>Windows</code>防火墙或者其他的第三方防护软件）允许外部连接到一个全新的端口，如果不允许，那么只能自行添加一个新的<code>Windows</code>防火墙规则。</p>
<p>该命令的常用参数如下：</p>
<ol>
<li><code>netstat -ano | find listenport</code>   查看是否启动成功</li>
<li><code>netsh interface portproxy show all</code>  显示系统中的转发规则列表</li>
<li><code>netsh interface portproxy dump</code>  查看portproxy设置</li>
<li><code>netsh interface portproxy delete v4tov4 listenport=localport listenaddress=localaddress</code></li>
<li><code>netsh interface portproxy reset</code>  清除所有端口转发规则</li>
</ol>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cud2lsbGlhbWxvbmcuaW5mby9hcmNoaXZlcy81NTc1Lmh0bWw=">通过Windows实现端口转发<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>windows</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Zero UPS</title>
    <url>/2021/05/06/Raspberry%20Zero%20UPS/</url>
    <content><![CDATA[<p>有一款小巧的开发板：<code>Raspberry Zero</code>，Broadcom BCM2835 SoC，它装有1 GHz ARM1176JZF-S单核CPU，Broadcom VideoCore IV @ 250 MHz GPU（仍支持高清）和512MB SDRAM；支持运行完整的<code>Linux (Arm系列)</code>系统，并且带有<code>WiFi</code>。</p>
<p><img src="/images/20210807/03/202003172109357539136.jpg" alt="树莓派zero" title="树莓派zero"></p>
<p>当然，这只是本文的主角之一，另一个主角是对应的UPS(算是吧)：</p>
<p><img src="/images/20210807/03/202003172113385662548.png" alt="树莓派 UPS" title="树莓派 UPS"></p>
<span id="more"></span>

<p>有人给树莓派做了一个电池🔋配件，能够让树莓派可以“脱离插座”，并且扩展了<code>USB 串口</code>功能，能够让<code>PC设备</code>通过<code>USB线</code>在供电的同时可以通过<code>串口</code>登录<code>树莓派zero</code>进行操作以及配置。</p>
<p>同时，该模块支持<code>I2C(IIC)</code>模式读取<code>电池电量</code>以及<code>电池温度</code>：</p>
<p>C++ 源码可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NsYW5nVG9vbHMvY2xhbmdUb29scy9ibG9iL21hc3Rlci9FeGFtcGxlL3Rlc3RfaTJjLmNwcA==">点此<i class="fa fa-external-link-alt"></i></span>查看。</p>
<p>Nodejs 源码可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L1Jhc3BiZXJyeVBpWmVyb0NvbnRyb2wtTm9kZWpz">点此<i class="fa fa-external-link-alt"></i></span>查看。</p>
<p>C++ 源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by caesar kekxv on 2020/3/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 树莓派电池模块</span></span><br><span class="line"><span class="comment">//     读取电池电压以及电池电量 🔋</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;i2c_tool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;logger.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> file_i2c;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buffer[<span class="number">60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">init_default</span>();</span><br><span class="line"></span><br><span class="line">    i2c_tool i2CTool;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">double</span> p, v;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> dataV, dataP;</span><br><span class="line"></span><br><span class="line">    i2CTool.<span class="built_in">setAddr</span>(<span class="number">0x36</span>); <span class="comment">// 设备 I2C 地址为 0x36</span></span><br><span class="line">    i2CTool.<span class="built_in">Open</span>();</span><br><span class="line">    std::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; data;</span><br><span class="line">    std::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; wData;</span><br><span class="line">    wData.<span class="built_in">push_back</span>(<span class="number">0x02</span>);</span><br><span class="line">    ret = i2CTool.<span class="built_in">transfer</span>(wData, &amp;data, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">e</span>(__FILENAME__, __LINE__, <span class="string">&quot;Read 0x02 : %d&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dataV = data[<span class="number">0</span>];</span><br><span class="line">    v = (<span class="keyword">double</span>) (((dataV &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>) + (dataV &gt;&gt; <span class="number">8</span>)) * <span class="number">1.25</span> / <span class="number">1000</span> / <span class="number">16</span>;</span><br><span class="line">    data.<span class="built_in">clear</span>();</span><br><span class="line">    wData[<span class="number">0</span>] = <span class="number">0x04</span>;</span><br><span class="line">    ret = i2CTool.<span class="built_in">transfer</span>(wData, &amp;data, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">e</span>(__FILENAME__, __LINE__, <span class="string">&quot;Read 0x04 : %d&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dataP = data[<span class="number">0</span>];</span><br><span class="line">    p = (<span class="keyword">double</span>) ((<span class="keyword">int</span>) ((dataP &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>) + (<span class="keyword">int</span>) (dataP &gt;&gt; <span class="number">8</span>)) / <span class="number">256</span> - <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">i</span>(__FILENAME__, __LINE__, <span class="string">&quot;电压 : %.02lfV; 电量 : %.02lf %%&quot;</span>, v, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有兴趣的各位可以去了解一下</p>
]]></content>
      <categories>
        <category>raspi</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>raspi</tag>
      </tags>
  </entry>
  <entry>
    <title>小尺寸电脑对比</title>
    <url>/2021/08/01/Small%20size%20computer%20comparison/</url>
    <content><![CDATA[<p>在需要带着笔记本出门的情况下，相对于如今动不动就 <code>15寸+</code> 的笔记本电脑，我更喜欢携带一些小尺寸的电脑，毕竟，每天上下班背电脑是真的重。</p>
<span id="more"></span>

<p>如果是正常推介的话，当然是首选 <code>MacBook</code> 系列为代表的的 <code>12寸</code> 到 <code>13寸</code> 左右的笔记本电脑。</p>
<p>而其中以 <code>MacBook Air</code> <code>13寸</code> 最为讨喜。价格和配置相对于 <code>MacBook Pro</code> 更让人接收，并且如果不是对性能要求较高，完全够用了。</p>
<p>另外华为系列的<code>HUAWEI MateBook X Pro 13.9</code>也不错，不过也是真的贵。</p>
<p>前面也说了，如果是正常推介的话，也就是这里暂时是不正常推介的：主要是挑了几款<code>10寸</code>以下 <code>内存 8G</code> 起步的笔记本电脑，看看性能和价格是如何。</p>
<h1 id="GPD-MicroPC-N4100-8GB-128GB-核显"><a href="#GPD-MicroPC-N4100-8GB-128GB-核显" class="headerlink" title="GPD MicroPC(N4100/8GB/128GB/核显)"></a>GPD MicroPC(N4100/8GB/128GB/核显)</h1><p>首先是最小的 <code>GPD</code> 一代系列 ：GPD MicroPC(N4100/8GB/128GB/核显)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>屏幕</td>
<td>6英寸</td>
</tr>
<tr>
<td>CPU</td>
<td>Intel 赛扬四核 N4100</td>
</tr>
<tr>
<td>CPU主频</td>
<td>1.1GHz</td>
</tr>
<tr>
<td>核心数</td>
<td>四核心/四线程</td>
</tr>
<tr>
<td>内存</td>
<td>8GB</td>
</tr>
<tr>
<td>电商报价</td>
<td>￥2399</td>
</tr>
</tbody></table>
<p>更多详细资料 <span class="exturl" data-url="aHR0cDovL2RldGFpbC56b2wuY29tLmNuLzEyOTkvMTI5ODg1Ni9wYXJhbS5zaHRtbA==">http://detail.zol.com.cn/1299/1298856/param.shtml<i class="fa fa-external-link-alt"></i></span>;</p>
<p>对于这款设备来说，优点就是小，缺点嘛，也是小，实在是太小了。不过如果外接<code>HDMI</code>显示器以及键鼠使用，还是不错的。</p>
<h1 id="GPD-Pocket-2-3965Y-8GB-256GB"><a href="#GPD-Pocket-2-3965Y-8GB-256GB" class="headerlink" title="GPD Pocket 2(3965Y/8GB/256GB)"></a>GPD Pocket 2(3965Y/8GB/256GB)</h1><p><code>GPD</code> 另一个系列 ：GPD Pocket 2(3965Y/8GB/256GB)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>屏幕</td>
<td>7英寸</td>
</tr>
<tr>
<td>CPU</td>
<td>Intel 赛扬 3965Y</td>
</tr>
<tr>
<td>CPU主频</td>
<td>1.5GHz</td>
</tr>
<tr>
<td>核心数</td>
<td>双核心/双线程</td>
</tr>
<tr>
<td>内存</td>
<td>8GB</td>
</tr>
<tr>
<td>电商报价</td>
<td>￥3399</td>
</tr>
</tbody></table>
<p>更多详细资料 <span class="exturl" data-url="aHR0cDovL2RldGFpbC56b2wuY29tLmNuL3VsdHJhYm9vay9pbmRleDEyOTg1MjYuc2h0bWw=">http://detail.zol.com.cn/ultrabook/index1298526.shtml<i class="fa fa-external-link-alt"></i></span>;</p>
<p>这款外观大小等还是比较合适，整体外观看上去也还不错。外接<code>HDMI</code>显示器以及键鼠使用，在这个价格上性能上也还算过得去。</p>
<h1 id="壹号本ONEMIX-3-Pro"><a href="#壹号本ONEMIX-3-Pro" class="headerlink" title="壹号本ONEMIX 3 Pro"></a>壹号本ONEMIX 3 Pro</h1><p><code>ONEMIX</code> 其中一个系列 ：壹号本ONEMIX 3 Pro</p>
<table>
<thead>
<tr>
<th>参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>屏幕</td>
<td>8.4英寸</td>
</tr>
<tr>
<td>CPU</td>
<td>Intel 酷睿i5 10210Y</td>
</tr>
<tr>
<td>CPU主频</td>
<td>1000MHz(最高4GHz)</td>
</tr>
<tr>
<td>核心数</td>
<td>四核心/八线程</td>
</tr>
<tr>
<td>内存</td>
<td>16GB</td>
</tr>
<tr>
<td>电商报价</td>
<td>￥6999</td>
</tr>
</tbody></table>
<p>更多详细资料 <span class="exturl" data-url="aHR0cDovL2RldGFpbC56b2wuY29tLmNuLzEzMDUvMTMwNDcyNi9wYXJhbS5zaHRtbA==">http://detail.zol.com.cn/1305/1304726/param.shtml<i class="fa fa-external-link-alt"></i></span>;</p>
<p>这款外观还可以，大小的话，相对于以上两款稍微大一点点，不过还是比较小，键位相对比较合适。<del>外接<code>HDMI</code>显示器以及键鼠使用</del>不外接显示器键盘鼠标用起来也还可以，不过有点小贵了，还行。</p>
<h1 id="GPD-p2-max-8100Y-16GB-512GB"><a href="#GPD-p2-max-8100Y-16GB-512GB" class="headerlink" title="GPD p2 max(8100Y/16GB/512GB)"></a>GPD p2 max(8100Y/16GB/512GB)</h1><p><code>GPD</code> 其中一个系列 ：GPD p2 max(8100Y/16GB/512GB)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>屏幕</td>
<td>8.9英寸</td>
</tr>
<tr>
<td>CPU</td>
<td>Intel 酷睿 m3 8100Y</td>
</tr>
<tr>
<td>CPU主频</td>
<td>1.1GHz(最高3.4GHz)</td>
</tr>
<tr>
<td>核心数</td>
<td>双核心/四线程</td>
</tr>
<tr>
<td>内存</td>
<td>16GB</td>
</tr>
<tr>
<td>电商报价</td>
<td>￥5299</td>
</tr>
</tbody></table>
<p>更多详细资料 <span class="exturl" data-url="aHR0cDovL2RldGFpbC56b2wuY29tLmNuL3VsdHJhYm9vay9pbmRleDEyOTgwOTMuc2h0bWw=">http://detail.zol.com.cn/ultrabook/index1298093.shtml<i class="fa fa-external-link-alt"></i></span>;</p>
<p>这款大小的话，相对于上一款款稍微大一丢丢，是真的一丢丢，外观和上一款相似，键位基本和常用的键位布局一致（<code>Q</code>的左边是<code>TAB</code>）。<del>外接<code>HDMI</code>显示器以及键鼠使用</del>同上，比上一款便宜一丢丢，还行。</p>
<p>以上四款，感觉都还不错，特别是最后两款，有闲钱的话，感觉买一个当备用机都是很棒滴，最起码带出门的时候一点都不重~~~~~~</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>用户配置脚本文件.netrc</title>
    <url>/2021/01/06/User%20configuration%20script%20file%20.netrc/</url>
    <content><![CDATA[<p>The .netrc file contains login and initialization information used by the auto-login process. It generally resides in the user’s home directory, but a location outside of the home directory can be set using the environment variable NETRC. Both locations are overridden by the command line option -N. The selected file must be a regular file, or access will be denied.</p>
<p>用于配置网络登录帐号信息的 <code>~/.netrc</code> 文件,保存用户名密码，减少输用户名密码。</p>
<p>文件 <code>~/.netrc</code> 用于设置自动登录时所需要的帐号信息。</p>
<span id="more"></span>

<p>下面是一个常用的”netrc”文件的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">machine  your-git-server</span><br><span class="line">login   your-username</span><br><span class="line">password   your-password</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果有多个 <code>server</code> 就重复上面的三行， 分别输入对应的<code>服务器</code>、 <code>用户名</code>和<code>密码</code>即可.</p>
<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">machine kekxv.github.io login username password passwd</span><br><span class="line">default login username password passwd</span><br></pre></td></tr></table></figure>

<p>每行一条记录<br><code>default</code> 行匹配所有主机<br>除了上面的形式，<code>netrc</code>文件还支持另外两个设置：</p>
<p><code>account</code>：用于指定额外的一个用户密码<br><code>macdef</code>：用于定义宏</p>
<p><code>netrc</code> 文件可以用于下列程序：</p>
<ol>
<li><code>curl</code></li>
<li><code>ftp</code></li>
<li><code>git</code></li>
<li>其他</li>
</ol>
<h1 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwtYnVpbGRmYXJtL2lzc3Vlcy83NTYjaXNzdWVjb21tZW50LTg0Nzg5MDcyMQ==">https://github.com/bazelbuild/bazel-buildfarm/issues/756#issuecomment-847890721<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9pbmV0dXRpbHMvbWFudWFsL2h0bWxfbm9kZS9UaGUtXzAwMmVuZXRyYy1maWxlLmh0bWw=">https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm9oeWVhaHdvby5jb20vP3A9NjMy">https://blog.ohyeahwoo.com/?p=632<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5tYXZldGp1Lm9yZy91bml4L25ldHJjLnBocA==">http://www.mavetju.org/unix/netrc.php<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <tags>
        <tag>notes</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 版图像拼接(OpenCV)</title>
    <url>/2020/03/01/Web%20%E7%89%88%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5(OpenCV)/</url>
    <content><![CDATA[<p>在某些情况下，我们需要将两张图像合并为一张，这时候我们会选择类似 <code>PhotoShow</code> 等画图软件进行拼接。不过我想偷个懒，自动拼接。<br>所以查找了一些资料之后，开发了 <code>Web版本的图像拼接</code> 接口。</p>
<span id="more"></span>

<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>用到的 web 端使用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcA==">kProxyCpp<i class="fa fa-external-link-alt"></i></span> ，图像处理用的是 <code>OpenCV</code>，技术实现参考了：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2t5ZnNtL3AvNzQxMTk2MS5odG1s">OpenCV探索之路（二十四）图像拼接和图像融合技术<i class="fa fa-external-link-alt"></i></span>（这篇文章有更详细的介绍，有兴趣的可以看看）。</p>
<p>源码已经上传至 <code>Github</code> ，仓库为：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcA==">kProxyCpp<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="http端实现"><a href="#http端实现" class="headerlink" title="http端实现"></a>http端实现</h2><p>使用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcA==">kProxyCpp<i class="fa fa-external-link-alt"></i></span>，比较简单点：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">kHttpd::<span class="built_in">Init</span>();</span><br><span class="line"><span class="comment">// 开启一个服务</span></span><br><span class="line"><span class="function">kHttpd <span class="title">kProxy</span><span class="params">(<span class="string">&quot;网站目录&quot;</span>, <span class="string">&quot;线程池数量&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 绑定路径 POST /MergePhoto</span></span><br><span class="line">kProxy.<span class="built_in">set_cb</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/MergePhoto&quot;</span>,[](<span class="keyword">void</span> *kClient, <span class="keyword">const</span> std::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;data, <span class="keyword">const</span> std::string &amp;url_path,<span class="keyword">const</span> std::string &amp;method, <span class="keyword">int</span> type, <span class="keyword">void</span> *arg) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">	<span class="comment">// 如果开启了WebSocket的情况下，并且是WebSocket链接，则 Type 将会 &gt;=0;</span></span><br><span class="line">	<span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="comment">// 在这里进行业务操作</span></span><br><span class="line">		…………</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">kProxy.<span class="built_in">listen</span>(<span class="number">20</span>, port, ip.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure>

<p>这样我们就绑定了路径 <code>POST /MergePhoto</code> ，然后结合我们的业务进行操作。</p>
<h2 id="图片拼接"><a href="#图片拼接" class="headerlink" title="图片拼接"></a>图片拼接</h2><p>原理就是</p>
<ol>
<li>对每幅图进行特征点提取</li>
<li>对对特征点进行匹配</li>
<li>进行图像配准</li>
<li>把图像拷贝到另一幅图像的特定位置</li>
<li>对重叠边界进行特殊处理</li>
</ol>
<p>参考的原文（<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2t5ZnNtL3AvNzQxMTk2MS5odG1s">OpenCV探索之路（二十四）图像拼接和图像融合技术<i class="fa fa-external-link-alt"></i></span>）有更加详细的介绍，我这边就不重复了，代码也比较多，请查看参考原文或者<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcC9ibG9iLzhjMzRmMTdkMjRlOWY0MjVkOWI4NGMxZTc2MTFjYzBiMjdjMGI0MzQvbWFpbi5jcHAjTDI5NQ==">例子源码<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>前端代码比较简单点，读取文件 <code>Base64</code> 格式字符串，然后一起传入到后台即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenCV合并图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = &#123;&#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onChange</span>(<span class="params">type</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">            reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 图片的base64编码会在这里被打印出来</span></span></span><br><span class="line"><span class="javascript">                data[type] = (event.target.result);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> img = <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;type&#125;</span>_img`</span>);</span></span><br><span class="line"><span class="javascript">                img.src = data[type];</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">            reader.readAsDataURL(file)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">MergePhoto</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//第一步：创建需要的对象</span></span></span><br><span class="line"><span class="javascript">            httpRequest.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/MergePhoto&#x27;</span>, <span class="literal">true</span>); <span class="comment">//第二步：打开连接/***发送json格式文件必须设置请求头 ；如下 - */</span></span></span><br><span class="line"><span class="javascript">            httpRequest.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span><br><span class="line"><span class="javascript">            httpRequest.send(<span class="built_in">JSON</span>.stringify(data));<span class="comment">//发送请求 将json写入send中</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             * 获取数据后的处理程序</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             */</span></span></span><br><span class="line"><span class="javascript">            httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//请求后的回调接口，可将请求成功后要执行的程序写在其中</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (httpRequest.readyState === <span class="number">4</span> &amp;&amp; httpRequest.status === <span class="number">200</span>) &#123;<span class="comment">//验证请求是否发送成功</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> json = httpRequest.responseText;<span class="comment">//获取到服务端返回的数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                        json = <span class="built_in">JSON</span>.parse(json);</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(json.code===<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.querySelector(<span class="string">&quot;#MergePhoto&quot;</span>).src = json.photo;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(json.message);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">max-height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">1.5em</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span><span class="selector-attr">[src=<span class="string">&quot;&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;right: 0;top:0;bottom: 50%;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:0.5em;box-sizing: border-box;border:1px solid #CCCCCC;position: absolute;left: 0;right:  50%;top:0;bottom:0;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>左边图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;onChange.call(this,&#x27;left&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;left_img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;左边图片&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:0.5em;box-sizing: border-box;border:1px solid #CCCCCC;position: absolute;left:  50%;right: 0;top:0;bottom: 0;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>右边图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;onChange.call(this,&#x27;right&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;right_img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;右边图片&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:0.5em;box-sizing: border-box;border:1px solid #CCCCCC;position: fixed;left: 0;right: 0;top: 50%;bottom: 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;MergePhoto()&quot;</span>&gt;</span>合并<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;MergePhoto&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;合并之后图片&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="/images/20210807/12/201912221453431857520.png" alt="最终效果" title="最终效果"></p>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>opencv</tag>
        <tag>web</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>bazel 笔记 01</title>
    <url>/2021/08/07/bazel%20notes%2001/</url>
    <content><![CDATA[<p>Bazel - a fast, scalable, multi-language and extensible build system</p>
<p>在使用 <code>bazel</code> 许久之后，开始做一下记录，以记录一些奇奇怪怪的处理方式（？）。</p>
<span id="more"></span>

<h1 id="引入第三方源码库"><a href="#引入第三方源码库" class="headerlink" title="引入第三方源码库"></a>引入第三方源码库</h1><p><code>bazel</code> 支持引入第三方库，例如 <code>c</code>/<code>c++</code> 引入 <code>cmake</code>、<code>make</code>、<code>configure</code>等方式编译的库，或者已编译完成等动态库或静态库。</p>
<p>WORKSPACE.bazel:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;</span>, <span class="string">&quot;http_archive&quot;</span>)</span><br><span class="line">load(<span class="string">&quot;@bazel_tools//tools/build_defs/repo:utils.bzl&quot;</span>, <span class="string">&quot;maybe&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 使用 rules_foreign_cc 进行第三方库引入</span><br><span class="line">http_archive(</span><br><span class="line">  name = <span class="string">&quot;rules_foreign_cc&quot;</span>,</span><br><span class="line">  sha256 = <span class="string">&quot;e14a159c452a68a97a7c59fa458033cc91edb8224516295b047a95555140af5f&quot;</span>,</span><br><span class="line">  strip_prefix = <span class="string">&quot;rules_foreign_cc-0.4.0&quot;</span>,</span><br><span class="line">  url = <span class="string">&quot;https://github.com/bazelbuild/rules_foreign_cc/archive/0.4.0.tar.gz&quot;</span>,</span><br><span class="line">)</span><br><span class="line">load(<span class="string">&quot;@rules_foreign_cc//foreign_cc:repositories.bzl&quot;</span>, <span class="string">&quot;rules_foreign_cc_dependencies&quot;</span>)</span><br><span class="line"># https:<span class="comment">//docs.aspect.dev/bazelbuild/rules_foreign_cc/0.3.0/readme#rules_foreign_cc_dependencies</span></span><br><span class="line">rules_foreign_cc_dependencies(</span><br><span class="line">  # macos 下远程编译需要使用该选项</span><br><span class="line">  register_default_tools = False,</span><br><span class="line">  # macos 下远程编译需要使用该选项</span><br><span class="line">  register_built_tools = False,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 引入 sqlite</span><br><span class="line">sqlite_all_content = <span class="string">&quot;&quot;</span><span class="string">&quot;filegroup(name = &quot;</span>all<span class="string">&quot;, srcs = [&quot;</span>sqlite3.c<span class="string">&quot;,&quot;</span>sqlite3.h<span class="string">&quot;], visibility = [&quot;</span><span class="comment">//visibility:public&quot;])&quot;&quot;&quot;</span></span><br><span class="line">maybe(</span><br><span class="line">  http_archive,</span><br><span class="line">  name = <span class="string">&quot;sqlite&quot;</span>,</span><br><span class="line">  build_file_content = sqlite_all_content,</span><br><span class="line">  sha256 = <span class="string">&quot;bd90c3eb96bee996206b83be7065c9ce19aef38c3f4fb53073ada0d0b69bbce3&quot;</span>,</span><br><span class="line">  strip_prefix = <span class="string">&quot;sqlite-autoconf-3360000&quot;</span>,</span><br><span class="line">  urls = [<span class="string">&quot;https://sqlite.org/2021/sqlite-autoconf-3360000.tar.gz&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 引入 openssl</span><br><span class="line">all_content = <span class="string">&quot;&quot;</span><span class="string">&quot;filegroup(name = &quot;</span>all<span class="string">&quot;, srcs = glob([&quot;</span>**<span class="string">&quot;]), visibility = [&quot;</span><span class="comment">//visibility:public&quot;])&quot;&quot;&quot;</span></span><br><span class="line">maybe(</span><br><span class="line">  http_archive,</span><br><span class="line">  name = <span class="string">&quot;openssl&quot;</span>,</span><br><span class="line">  build_file_content = all_content,</span><br><span class="line">  sha256 = <span class="string">&quot;b92f9d3d12043c02860e5e602e50a73ed21a69947bcc74d391f41148e9f6aa95&quot;</span>,</span><br><span class="line">  strip_prefix = <span class="string">&quot;openssl-OpenSSL_1_1_1k&quot;</span>,</span><br><span class="line">  urls = [</span><br><span class="line">      <span class="string">&quot;https://github.com/openssl/openssl/archive/OpenSSL_1_1_1k.tar.gz&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>sqlite 编译文件<code>BUILD.bazel</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">  name = <span class="string">&quot;sqlite3&quot;</span>,</span><br><span class="line">  srcs = [<span class="string">&quot;@sqlite//:all&quot;</span>],</span><br><span class="line">  hdrs = [<span class="string">&quot;@sqlite//:all&quot;</span>],</span><br><span class="line">  visibility = [<span class="string">&quot;//visibility:public&quot;</span>],</span><br><span class="line">  deps = [],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>openssl 编译文件<code>BUILD.bazel</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;@rules_foreign_cc//foreign_cc:defs.bzl&quot;</span>, <span class="string">&quot;configure_make&quot;</span>)</span><br><span class="line">CONFIGURE_OPTIONS = [</span><br><span class="line">  <span class="string">&quot;no-shared&quot;</span>,</span><br><span class="line">  <span class="string">&quot;no-sse2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;-static&quot;</span>,</span><br><span class="line">]</span><br><span class="line">configure_make(</span><br><span class="line">  name = <span class="string">&quot;openssl&quot;</span>,</span><br><span class="line">  # 根据实际情况选择 Configure 还是 config</span><br><span class="line">  configure_command = <span class="string">&quot;config&quot;</span>,</span><br><span class="line">  configure_options = CONFIGURE_OPTIONS,</span><br><span class="line">  # 根据情况引入 pthread</span><br><span class="line">  linkopts = [<span class="string">&quot;-lpthread&quot;</span>],</span><br><span class="line">  lib_source = <span class="string">&quot;@openssl//:all&quot;</span>,</span><br><span class="line">  out_static_libs = [</span><br><span class="line">    <span class="string">&quot;libssl.a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;libcrypto.a&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  targets = [</span><br><span class="line">    <span class="string">&quot;build_libs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;install_dev&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  visibility = [<span class="string">&quot;//visibility:public&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>更多的例子参考： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvcnVsZXNfZm9yZWlnbl9jYy90cmVlL21haW4vZXhhbXBsZXMvdGhpcmRfcGFydHk=">https://github.com/bazelbuild/rules_foreign_cc/tree/main/examples/third_party<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="bazel-支持远程编译、测试。"><a href="#bazel-支持远程编译、测试。" class="headerlink" title="bazel 支持远程编译、测试。"></a><code>bazel</code> 支持<code>远程编译</code>、<code>测试</code>。</h1><p>远程编译建议使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhemVsYnVpbGQvYmF6ZWwtYnVpbGRmYXJt">bazel-buildfarm<i class="fa fa-external-link-alt"></i></span> 友好地支持。</p>
<p><code>bazel-buildfarm</code> 不支持账号密码，但是可以使用<code>nginx</code> <code>auth_basic</code>作为验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 801 http2;</span><br><span class="line">  server_name _;</span><br><span class="line">  client_max_body_size     512M;</span><br><span class="line">  grpc_buffer_size         100M;</span><br><span class="line">  grpc_read_timeout        1d;</span><br><span class="line">  grpc_send_timeout        1d;</span><br><span class="line">  sendfile                 on;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      auth_basic &quot;Please enter your username and password&quot;;</span><br><span class="line">      auth_basic_user_file /etc/bazel-buildfarm/buildfarm.htpasswd;</span><br><span class="line">      grpc_pass grpc://localhost:8980;</span><br><span class="line">      proxy_buffering off;</span><br><span class="line">      proxy_send_timeout 1200;</span><br><span class="line">      proxy_read_timeout 1200;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配合 <code>.netrc</code> 自动输入账号密码。参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9pbmV0dXRpbHMvbWFudWFsL2h0bWxfbm9kZS9UaGUtXzAwMmVuZXRyYy1maWxlLmh0bWw=">The .netrc file<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>The .netrc file contains login and initialization information used by the auto-login process.<br>It generally resides in the user’s home directory,<br>but a location outside of the home directory can be set using the environment variable NETRC.<br>Both locations are overridden by the command line option -N.<br>The selected file must be a regular file, or access will be denied.</p>
</blockquote>
<h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><ul>
<li><p>如果在macos编译需要GUI等库等情况下，无法执行，且提示： <strong><code>Symbol not found: &quot;_NSApp&quot;</code></strong> ,则需要加入链接参数：<code>linkopts = [&quot;-framework Cocoa&quot;,&quot;-framework OpenGL&quot;]</code>，便可以执行。 </p>
</li>
<li><p>如果使用<code>rules_foreign_cc</code>引入外部库，在进行编译的时候，出现大量 <code>std</code> 相关未定义错误，则是未加入<code>c++</code>链接导致，暂时不知道原因，但是可以通过 <code>maybe</code>/<code>http_archive</code>的<code>patch_cmds</code>功能，配合<code>sed</code>自动插入<code>-lstdc++</code>等所需链接，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">all_content = <span class="string">&quot;&quot;</span><span class="string">&quot;filegroup(name = &quot;</span>all<span class="string">&quot;, srcs = glob([&quot;</span>**<span class="string">&quot;]), visibility = [&quot;</span><span class="comment">//visibility:public&quot;])&quot;&quot;&quot;</span></span><br><span class="line">maybe(</span><br><span class="line">    http_archive,</span><br><span class="line">    name = <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    build_file_content = all_content,</span><br><span class="line">    patch_cmds = [</span><br><span class="line">        <span class="string">&quot;find . -type f \\( -name &#x27;WORKSPACE&#x27; -o -name &#x27;*.bzl&#x27;  -o -name &#x27;BUILD&#x27; \\) -exec rm -f &#123;&#125; +&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    sha256 = <span class="string">&quot;b5f1472a970897196bf18effb00e202086b0e11e2d15ab61932c3c24e943f864&quot;</span>,</span><br><span class="line">    strip_prefix = <span class="string">&quot;mysql-connector-cpp-8.0.25&quot;</span>,</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&quot;https://github.com/mysql/mysql-connector-cpp/archive/8.0.25.tar.gz&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">maybe(</span><br><span class="line">    http_archive,</span><br><span class="line">    name = <span class="string">&quot;mysql_ubuntu&quot;</span>,</span><br><span class="line">    build_file_content = all_content,</span><br><span class="line">    patch_cmds = [</span><br><span class="line">        <span class="string">&quot;find . -type f \\( -name &#x27;WORKSPACE&#x27; -o -name &#x27;*.bzl&#x27;  -o -name &#x27;BUILD&#x27; \\) -exec rm -f &#123;&#125; +&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;sed -i&#x27;&#x27; -e &#x27;120a \\</span></span><br><span class="line"><span class="string">    TARGET_LINK_LIBRARIES(save_linker_opts -lstdc++ )</span></span><br><span class="line"><span class="string">&#x27; cmake/libutils.cmake&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protobuf protobuf-lite/protobuf protobuf-lite -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protoclib protobuf/protoclib protobuf -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protoc protoclib/protoc protoclib -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -ibuildinfo.cmake &#x27;s/NOT EXISTS INFO_SRC/NOT EXISTS \&quot;\\$\\&#123;CMAKE_BINARY_DIR\\&#125;\\/INFO_SRC\&quot;/g&#x27; buildinfo.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -ibuildinfo.cmake &#x27;s/CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR/g&#x27; buildinfo.cmake&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    sha256 = <span class="string">&quot;b5f1472a970897196bf18effb00e202086b0e11e2d15ab61932c3c24e943f864&quot;</span>,</span><br><span class="line">    strip_prefix = <span class="string">&quot;mysql-connector-cpp-8.0.25&quot;</span>,</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&quot;https://github.com/mysql/mysql-connector-cpp/archive/8.0.25.tar.gz&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">maybe(</span><br><span class="line">    http_archive,</span><br><span class="line">    name = <span class="string">&quot;mysql_mingw&quot;</span>,</span><br><span class="line">    build_file_content = all_content,</span><br><span class="line">    patch_cmds = [</span><br><span class="line">        <span class="string">&quot;find . -type f \\( -name &#x27;WORKSPACE&#x27; -o -name &#x27;*.bzl&#x27;  -o -name &#x27;BUILD&#x27; \\) -exec rm -f &#123;&#125; +&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;sed -i&#x27;&#x27; -e &#x27;120a \\</span></span><br><span class="line"><span class="string">  TARGET_LINK_LIBRARIES(save_linker_opts -static-libgcc -static-libstdc++ -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic)</span></span><br><span class="line"><span class="string">&#x27; cmake/libutils.cmake&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protobuf protobuf-lite/protobuf protobuf-lite -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/COMMAND Protobuf::protoc/COMMAND wine #Protobuf::protoc/g&#x27; cdk/cmake/DepFindProtobuf.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/ARGS --cpp_out \&quot;/ARGS ..\\/..\\/protobuf\\/protoc.exe --cpp_out \&quot;Z:/g&#x27; cdk/cmake/DepFindProtobuf.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/-I \\$&#123;ABS_PATH&#125; \\$&#123;ABS_FIL&#125;/-I Z:\\$&#123;ABS_PATH&#125; Z:\\$&#123;ABS_FIL&#125;/g&#x27; cdk/cmake/DepFindProtobuf.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/--proto_path=/--proto_path=Z:/g&#x27; cdk/cmake/DepFindProtobuf.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/RULE_LAUNCH_LINK \&quot;/RULE_LAUNCH_LINK \&quot;wine /g&#x27; cmake/libutils.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protoclib protobuf/protoclib protobuf -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/protoc protoclib/protoc protoclib -lstdc++/g&#x27; cdk/protobuf/CMakeLists.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -ibuildinfo.cmake &#x27;s/NOT EXISTS INFO_SRC/NOT EXISTS \&quot;\\$\\&#123;CMAKE_BINARY_DIR\\&#125;\\/INFO_SRC\&quot;/g&#x27; buildinfo.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -ibuildinfo.cmake &#x27;s/CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR/g&#x27; buildinfo.cmake&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sed -i.bak &#x27;s/file(STRINGS \&quot;$&#123;BUILD_LOG&#125;\&quot; DEPS)/file(STRINGS \&quot;$&#123;BUILD_LOG&#125;\&quot; DEPS)\\n    set(DEPS \&quot;\\$\\&#123;DEPS\\&#125;;xapi\\/libxapi.a;devapi\\/libdevapi.a;common\\/libcommon.a;cdk\\/core\\/libcdk.a;cdk\\/mysqlx\\/libcdk_mysqlx.a;cdk\\/protocol\\/mysqlx\\/libcdk_proto_mysqlx.a;cdk\\/extra\\/zlib\\/libz.a;cdk\\/extra\\/liblz4.a;cdk\\/extra\\/zstd\\/libzstd.a;cdk\\/parser\\/libcdk_parser.a;cdk\\/foundation\\/libcdk_foundation.a;cdk\\/protobuf\\/libprotobuf-lite.a;\&quot;\\)/g&#x27; cmake/libutils/merge_archives.cmake.in&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    sha256 = <span class="string">&quot;b5f1472a970897196bf18effb00e202086b0e11e2d15ab61932c3c24e943f864&quot;</span>,</span><br><span class="line">    strip_prefix = <span class="string">&quot;mysql-connector-cpp-8.0.25&quot;</span>,</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&quot;https://github.com/mysql/mysql-connector-cpp/archive/8.0.25.tar.gz&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>bazel</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>bazel</tag>
      </tags>
  </entry>
  <entry>
    <title>bazel 工具链</title>
    <url>/2021/08/06/bazel%20toolchain%2001/</url>
    <content><![CDATA[<p>最近在使用 <code>bazel</code> ，尝试使用交叉编译，在这做个记录</p>
<p>配置的地方有几个：</p>
<ol>
<li><code>.bazelrc</code> 文件配置，用于激活 <code>config</code> 配置</li>
<li>创建 <code>toolchain</code> 目录，并创建<code>BUILD</code>文件</li>
<li>创建对应的 <code>.bzl</code> 文件</li>
</ol>
<span id="more"></span>

<p><code>.bazelrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use our custom-configured c++ toolchain.</span><br><span class="line">build:darwin_x86_64_config --crosstool_top=//toolchain:clang_suite</span><br><span class="line"># Use --cpu as a differentiator.</span><br><span class="line">build:darwin_x86_64_config --cpu=darwin_x86_64</span><br><span class="line"># Use the default Bazel C++ toolchain to build the tools used during the</span><br><span class="line"># build.</span><br><span class="line">build:darwin_x86_64_config --host_crosstool_top=@bazel_tools//tools/cpp:toolchain</span><br><span class="line"># bazel build --config=darwin_x86_64_config //...</span><br></pre></td></tr></table></figure>

<p><code>toolchain/BUILD</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;:darwin_x86_64_toolchain_config.bzl&quot;</span>, <span class="string">&quot;darwin_x86_64_toolchain_config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span>(default_visibility = [<span class="string">&quot;//visibility:public&quot;</span>])</span><br><span class="line"></span><br><span class="line">#filegroup(name = <span class="string">&quot;clang_suite&quot;</span>)</span><br><span class="line"></span><br><span class="line">cc_toolchain_suite(</span><br><span class="line">    name = <span class="string">&quot;clang_suite&quot;</span>,</span><br><span class="line">    toolchains = &#123;</span><br><span class="line">        <span class="string">&quot;darwin_x86_64&quot;</span>: <span class="string">&quot;:darwin_x86_64_toolchain&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line">filegroup(name = <span class="string">&quot;empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">cc_toolchain(</span><br><span class="line">    name = <span class="string">&quot;darwin_x86_64_toolchain&quot;</span>,</span><br><span class="line">    toolchain_identifier = <span class="string">&quot;darwin_x86_64-toolchain&quot;</span>,</span><br><span class="line">    toolchain_config = <span class="string">&quot;:darwin_x86_64_toolchain_config&quot;</span>,</span><br><span class="line">    all_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    compiler_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    dwp_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    linker_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    objcopy_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    strip_files = <span class="string">&quot;:empty&quot;</span>,</span><br><span class="line">    supports_param_files = <span class="number">0</span>,</span><br><span class="line">)</span><br><span class="line">darwin_x86_64_toolchain_config(name = <span class="string">&quot;darwin_x86_64_toolchain_config&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>toolchain/darwin_x86_64_toolchain_config.bzl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># toolchain/darwin_x86_64_toolchain_config.bzl:</span><br><span class="line">load(<span class="string">&quot;@bazel_tools//tools/build_defs/cc:action_names.bzl&quot;</span>, <span class="string">&quot;ACTION_NAMES&quot;</span>)</span><br><span class="line">load(</span><br><span class="line">   <span class="string">&quot;@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl&quot;</span>,</span><br><span class="line">   <span class="string">&quot;feature&quot;</span>,</span><br><span class="line">   <span class="string">&quot;flag_group&quot;</span>,</span><br><span class="line">   <span class="string">&quot;flag_set&quot;</span>,</span><br><span class="line">   <span class="string">&quot;tool_path&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">all_link_actions = [</span><br><span class="line">   ACTION_NAMES.cpp_link_executable,</span><br><span class="line">   ACTION_NAMES.cpp_link_dynamic_library,</span><br><span class="line">   ACTION_NAMES.cpp_link_nodeps_dynamic_library,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">_impl</span><span class="params">(ctx)</span>:</span></span><br><span class="line"><span class="function">    tool_paths </span>= [</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;gcc&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/usr/bin/clang&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;ld&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/usr/bin/ld&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;ar&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/usr/bin/ar&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/bin/false&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;gcov&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/bin/false&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;nm&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/bin/false&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;objdump&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/bin/false&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        tool_path(</span><br><span class="line">            name = <span class="string">&quot;strip&quot;</span>,</span><br><span class="line">            path = <span class="string">&quot;/bin/false&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    features = [</span><br><span class="line">       feature(</span><br><span class="line">           name = <span class="string">&quot;default_linker_flags&quot;</span>,</span><br><span class="line">           enabled = True,</span><br><span class="line">           flag_sets = [</span><br><span class="line">               flag_set(</span><br><span class="line">                   actions = all_link_actions,</span><br><span class="line">                   flag_groups = ([</span><br><span class="line">                       flag_group(</span><br><span class="line">                           flags = [</span><br><span class="line">                               <span class="string">&quot;-lstdc++&quot;</span>,</span><br><span class="line">                           ],</span><br><span class="line">                       ),</span><br><span class="line">                   ]),</span><br><span class="line">               ),</span><br><span class="line">           ],</span><br><span class="line">       ),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cc_common.create_cc_toolchain_config_info(</span><br><span class="line">          ctx = ctx,</span><br><span class="line">          features = features,</span><br><span class="line">          cxx_builtin_include_directories = [</span><br><span class="line">            <span class="string">&quot;/Library/Developer/CommandLineTools/usr/include/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/Library/Developer/CommandLineTools/usr/lib/clang/12.0.0/include/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/usr/include&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          toolchain_identifier = <span class="string">&quot;local&quot;</span>,</span><br><span class="line">          host_system_name = <span class="string">&quot;local&quot;</span>,</span><br><span class="line">          target_system_name = <span class="string">&quot;local&quot;</span>,</span><br><span class="line">          target_cpu = <span class="string">&quot;darwin_x86_64&quot;</span>,</span><br><span class="line">          target_libc = <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">          compiler = <span class="string">&quot;clang&quot;</span>,</span><br><span class="line">          abi_version = <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">          abi_libc_version = <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">          tool_paths = tool_paths,</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line">darwin_x86_64_toolchain_config = rule(</span><br><span class="line">    implementation = _impl,</span><br><span class="line">    attrs = &#123;&#125;,</span><br><span class="line">    provides = [CcToolchainConfigInfo],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>编译的时候带上参数 <code>--config</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bazel build --config=darwin_x86_64_config //...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>bazel</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>bazel</tag>
      </tags>
  </entry>
  <entry>
    <title>c51 警告问题</title>
    <url>/2021/01/06/c51%20warning/</url>
    <content><![CDATA[<p>最近在给一个 C51 的项目进行协议加密开发，遇到一个警告，本着警告就是没有问题跑了项目，然，加密数据全乱了！！！</p>
<p>警告 ⚠️ 大概长这样：</p>
<p><img src="/images/20210807/WX20200923-162500@2x.png" alt="C51 警告"></p>
<span id="more"></span>


<p>出现该警告的原因是：</p>
<p>在主流程里面调用了一个函数，然后在中断里面同时也调用了该函数，同时该函数使用了部分可能会重叠的内存地址，从而导致在做加密解密的时候，数据乱了！！！</p>
<p>最简单的解决方法是将该函数中断方法提取出来，放到主流程内。</p>
]]></content>
      <categories>
        <category>c51</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>c51</tag>
        <tag>SCM</tag>
      </tags>
  </entry>
  <entry>
    <title>cSharp HttpClient Cookie 记录</title>
    <url>/2021/03/06/cSharp%20HttpClient%20Cookie%20notes/</url>
    <content><![CDATA[<p>使用<code>CookieContainer</code>自动管理你的<code>HttpClient</code> <code>Cookie</code>。</p>
<p>因为业务需要，客户端需要进行登录，登录的会话<code>token</code>保留在<code>cookie</code>呢，所以需要让<code>HttpClient</code>携带上<code>Cookie</code>，本文作为一个记录。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClientTool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果全局cookie，可以使用静态变量，如果不是全局，可只作为内部变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CookieContainer cookies = <span class="keyword">new</span> CookieContainer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpClientHandler handler = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line">        <span class="comment">// 开启cookie</span></span><br><span class="line">        handler.UseCookies = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 使用 CookieContainer 管理</span></span><br><span class="line">        handler.CookieContainer = cookies;</span><br><span class="line">        <span class="comment">// 将 HttpClientHandler 传入HttpClient，之后发送接收请求都会通过`cookies`进行cookie管理</span></span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient(handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>MacOs</code> 版本的 <code>Rider</code> 居然不支持 <code>WinForm</code> ，还得开个虚拟机测试。啧</em></p>
]]></content>
      <categories>
        <category>cSharp</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>cSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>clangTools</title>
    <url>/2021/01/06/clangTools/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2NsYW5nVG9vbHM=">clangTools<i class="fa fa-external-link-alt"></i></span> 聚合类是为了将一些短小精湛的代码集合起来。</p>
<p>在进行<code>c/c++</code>开发的使用，由于自带的系统库支持的问题，或者api接口的问题，导致<code>c/c++</code>在不规范开发的时候，很容易出现冗余代码，或者各种查API手册的问题。</p>
<p>为了减少这些情况，所以将一些常用的方法，并且第三方依赖较少的方法进行封装。</p>
<span id="more"></span>

<h1 id="编译状态-build-status"><a href="#编译状态-build-status" class="headerlink" title="编译状态 build status"></a>编译状态 build status</h1><p>bazel : <img src="https://github.com/ClangTools/clangTools/workflows/bazel-build%20CI/badge.svg" style="display: inline; margin-bottom: 0;" /></p>
<p>cmake : <img src="https://github.com/ClangTools/clangTools/workflows/C/C++%20CI/badge.svg" style="display: inline; margin-bottom: 0;" /></p>
<h1 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h1><ul>
<li><a href="src/Base64">Base64</a>,</li>
<li><a href="src/ConfigTool">ConfigTool</a>,</li>
<li><a href="src/http">http</a>,</li>
<li><a href="src/JSON">JSON</a>,</li>
<li><a href="src/logger">logger</a>,</li>
<li><a href="src/memory_share">memory_share</a>,</li>
<li><a href="src/openssl">openssl</a>,</li>
<li><a href="src/Pipe">Pipe</a>,</li>
<li><a href="src/poll_tool">poll_tool</a>,</li>
<li><a href="src/Popen">Popen</a>,</li>
<li><a href="src/SHA1">SHA1</a>,</li>
<li><a href="src/socket">socket</a>,</li>
<li><a href="src/subprocess">subprocess</a>,</li>
<li><a href="src/thread_pool">thread_pool</a>,</li>
<li><a href="src/xml">xml</a></li>
<li><a href="src/i2c_tool">i2c_tool</a></li>
<li><a href="src/libusb_1_tool">libusb_1_tool</a></li>
<li><a href="src/opencv_tool">opencv_tool</a></li>
<li><a href="src/Hzk_tool">Hzk_tool</a></li>
<li><a href="src/plthook">plthook</a>(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1Ym8vcGx0aG9vaw==">here<i class="fa fa-external-link-alt"></i></span>)</li>
</ul>
<h1 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h1><ol>
<li>需要支持<code>c++ 17</code>，主要是使用 <code>filesystem</code> 接口，可以自行去掉。</li>
<li>需要<code>cmake</code>支持，版本：<code>&gt;3.9</code></li>
<li>如果需要 <code>TLS</code> 支持，则需要<code>OpenSSL</code>。</li>
</ol>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="JSON-以及-XML-解析"><a href="#JSON-以及-XML-解析" class="headerlink" title="JSON 以及 XML 解析"></a>JSON 以及 XML 解析</h2><p>项目集成了<code>JSON</code> 以及 <code>XML</code> 的解析以及常用操作。<code>JSON</code>和<code>XML</code> 应该是很常用的传输格式了，所以将其加入到本工具仓库。</p>
<blockquote>
<p>此处使用第三方： tinyxml2,CJsonObject.</p>
</blockquote>
<h2 id="SHA1-base64"><a href="#SHA1-base64" class="headerlink" title="SHA1,base64"></a>SHA1,base64</h2><p>加入 <code>SHA1</code> 以及 <code>Base64</code>支持，由于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcA==">kProxyCpp<i class="fa fa-external-link-alt"></i></span> 项目需要，所以将其加入。主要用作：<code>WebSocket</code> 秘钥升级，以及图片的传输(指的是在不使用二进制传输的情况下)。</p>
<h2 id="logger-日志"><a href="#logger-日志" class="headerlink" title="logger 日志"></a>logger 日志</h2><p>在软件运行的时候，难免会遇到问题，这时候日志的作用就比较明显，但是<code>c/c++</code>系统库内并没有很好地日志库，这让人感到遗憾，所以在本项目里面加入了<code>logger</code>日志库，该日志库支持5种模式，分别为：debug，info，warning ，error ，fatal；分别对应调试信息，一般信息，警告信息，错误信息，强制输出信息。</p>
<p>同时支持文件输出。</p>
<h2 id="thread-pool-线程池"><a href="#thread-pool-线程池" class="headerlink" title="thread_pool 线程池"></a>thread_pool 线程池</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2NsYW5nVG9vbHMvYmxvYi9tYXN0ZXIvc3JjL3RocmVhZF9wb29sLm1k">thread_pool.md<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>“管理一个任务队列，一个线程队列，然后每次取一个任务分配给一个线程去做，循环往复。” 这个思路有神马问题？ 线程池一般要复用线程，所以如果是取一个 task 分配给某一个 thread，执行完之后再重新分配， 在语言层面基本都是不支持的：一般语言的 thread 都是执行一个固定的 task 函数， 执行完毕线程也就结束了(至少 c++ 是这样)。 so 要如何实现 task 和 thread 的分配呢？</p>
<p>让每一个 thread 都去执行调度函数：循环获取一个 task，然后执行之。</p>
<p>这样可以保证了 thread 函数的唯一性，而且复用线程执行 task 。</p>
<p>一个线程 pool，一个任务队列 queue ；</p>
<p>任务队列是典型的生产者-消费者模型，本模型至少需要两个工具：一个 mutex + 一个条件变量，或是一个 mutex + 一个信号量。mutex 实际上就是锁，保证任务的添加和移除(获取)的互斥性，一个条件变量是保证获取 task 的同步性：一个 empty 的队列，线程应该等待(阻塞)；</p>
<p>atomic 本身是原子类型，从名字上就懂：它们的操作 load()/store() 是原子操作，所以不需要再加 mutex。</p>
<h2 id="ssl-common-OpenSSL-封装"><a href="#ssl-common-OpenSSL-封装" class="headerlink" title="ssl_common OpenSSL 封装"></a>ssl_common OpenSSL 封装</h2><p>2019年12月30日，终于把<code>OpenSSL</code>弄好了，为啥要说终于？因为资料少，加上 API 比较多，然后之前也没整过，然后导致载坑了3天，才搞完。然后将其封装为一个标记方便使用的工具类。</p>
<h2 id="socket-工具类"><a href="#socket-工具类" class="headerlink" title="socket 工具类"></a>socket 工具类</h2><p>非阻塞读写TCP连接，做跨平台支持</p>
<p>结合 <code>ssl_common(OpenSSL)</code> 工具类，可以支持TLS加密。</p>
<p>可用于https server（包含WebSocket）</p>
<p>参考代码： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tQcm94eUNwcA==">kProxyCpp<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>docker swarm替代docker-compose</title>
    <url>/2021/08/07/docker%20swarm%E6%9B%BF%E4%BB%A3docker-compose/</url>
    <content><![CDATA[<p>使用 docker-compose 管理本地容器组，是非常方便的手段，但是最近遇到一个 bug，决定使用 docker stack /swarm 替代 docker-compose 。</p>
<blockquote>
<p>命令行生成二维码可以试试 <code>echo &quot;二维码内容&quot; | qrencode -o - -t UTF8</code></p>
</blockquote>
<p>事情是这样的，在 <code>docker-compose.yaml</code> 内定义了 <code>network</code>.<code>aliases</code> 之后，在测试的时候，其他容器能够正常通过 <code>aliases</code> 对其进行访问，但是，到了实际部署的时候，很容易失败，例如重启之后，或者某个容器意外或者手动重启之后，都有可能导致该情况，导致很湿郁闷。</p>
<p>遂，在查找资料之后，决定替换掉 <code>docker-compose</code>。</p>
<blockquote>
<p>Ps：<code>docker-compose</code> 的配置 <code>depends_on</code> 只会控制控制启动顺序，并不会等待所需容器启动成功之后再启动下一 容器<br>简单来说，启动容器<code>数据库</code>之后会马上启动容器<code>应用</code>，并不在乎<code>应用</code>容器需要<code>数据库</code>容器才能正常运行，此时可能会造成 <code>应用</code> 容器无法找到数据库而意外退出。</p>
</blockquote>
<span id="more"></span>

<h1 id="docker-stack-swarm-简单使用说明："><a href="#docker-stack-swarm-简单使用说明：" class="headerlink" title="docker stack/swarm 简单使用说明："></a>docker stack/swarm 简单使用说明：</h1><ul>
<li>配置swarm<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure>
<p>初始化 <code>swarm</code> ，只需要初始化一次即可，如果设备有多个<code>IP</code>，则需要指定对外<code>IP</code>。</p>
</blockquote>
</li>
<li>开始部署服务组<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml stack-demo</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果 <code>docker-compose.yml</code> 配置了自定义<code>IP</code>(例如：<code>172.18.0.1</code>)，请不要与现有的网络冲突。</p>
</blockquote>
</li>
</ul>
<p>没有意外的话，服务就建好了。</p>
<h1 id="常用-docker-stack-swarm-命令"><a href="#常用-docker-stack-swarm-命令" class="headerlink" title="常用 docker stack/swarm 命令"></a>常用 <code>docker stack/swarm</code> 命令</h1><ul>
<li>查看当前网络<blockquote>
<p>docker network ls</p>
</blockquote>
</li>
<li>查看服务状态<blockquote>
<p>docker service ls </p>
</blockquote>
</li>
<li>查看节点<blockquote>
<p>docker node ls</p>
</blockquote>
</li>
<li>查看具体服务状态<code>ps</code><blockquote>
<p>docker service ps 服务名</p>
</blockquote>
</li>
<li>更新服务<blockquote>
<p>docker service update 服务名</p>
</blockquote>
</li>
<li>强制更新（重启）<blockquote>
<p>docker service update –force 服务名</p>
</blockquote>
</li>
<li>查看所有容器占用（推介）<blockquote>
<p>docker stats`</p>
</blockquote>
</li>
<li>批量删除 <code>none</code> 标签镜像 根据自己情况进行处理<blockquote>
<p>docker rmi $(docker images | awk ‘/<none>/ { print $3 }’)</p>
</blockquote>
</li>
<li>清理关闭的容器以及未在使用的容器 <code>慎用</code><blockquote>
<p>dangling image：docker system prune –all –force –volumes</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">管理命令：</span><br><span class="line">  container   管理容器</span><br><span class="line">  image 管理镜像</span><br><span class="line">  network 管理网络</span><br><span class="line">  node 管理Swarm节点</span><br><span class="line">  plugin 管理插件</span><br><span class="line">  secret 管理Docker secrets</span><br><span class="line">  service 管理服务</span><br><span class="line">  stack 管理Docker stacks</span><br><span class="line">  swarm 管理Swarm集群</span><br><span class="line">  system 查看系统信息</span><br><span class="line">  volume 管理卷 如：docker container ls 显示所有容器 普通命令： attach 进入一个运行的容器</span><br><span class="line">  build 从一个DockerFile构建镜像</span><br><span class="line">  commit 从容器创建一个镜像</span><br><span class="line">  cp 从容器和主机文件系统之间拷贝文件 create 创建一个容器</span><br><span class="line">  diff 检查容器文件系统上的更改</span><br><span class="line">  events 从服务器获取实时事件</span><br><span class="line">  exec 在正在运行的容器中运行命令</span><br><span class="line">  export 将容器的文件系统导出为tar存档</span><br><span class="line">  history 显示镜像的历史记录</span><br><span class="line">  images 查看镜像列表</span><br><span class="line">  import 从归档文件中创建镜像</span><br><span class="line">  info 显示系统范围的信息</span><br><span class="line">  inspect 返回Docker对象的低级信息</span><br><span class="line">  kill kill运行中的容器</span><br><span class="line">  load 从存档或者STDIN加载镜像</span><br><span class="line">  login 登陆docker镜像仓库</span><br><span class="line">  logout 退出docker镜像仓库</span><br><span class="line">  logs 获取一个容器的日志</span><br><span class="line">  pause 暂停一个或多个容器中的所有进程</span><br><span class="line">  port 查看端口映射或容器的特定映射列表</span><br><span class="line">  ps 查看容器列表</span><br><span class="line">  pull 从镜像仓库拉取镜像</span><br><span class="line">  push 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span><br><span class="line">  rename 重命名容器</span><br><span class="line">  restart 重启容器</span><br><span class="line">  rm 删除容器</span><br><span class="line">  rmi 删除镜像</span><br><span class="line">  run 创建一个新的容器并运行一个命令</span><br><span class="line">  save 将指定镜像保存成 tar 归档文件</span><br><span class="line">  search 从Docker Hub搜索镜像</span><br><span class="line">  start 启动容器</span><br><span class="line">  stats 实时显示容器资源使用情况的统计信息</span><br><span class="line">  stop 停止容器</span><br><span class="line">  tag 标记本地镜像，将其归入某一仓库</span><br><span class="line">  top 展示一个容器中运行的进程</span><br><span class="line">  unpause 恢复容器中所有的进程</span><br><span class="line">  update 更新容器配置</span><br><span class="line">  version 显示Docker的版本信息</span><br><span class="line">  wait 阻塞直到容器停止，然后打印退出代码 如：docker images 显示所有镜像</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p>docker swarm 搭建与服务更新（推介） <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZWppeXVhbi9wLzEwNTgwMzMxLmh0bWw=">https://www.cnblogs.com/ejiyuan/p/10580331.html<i class="fa fa-external-link-alt"></i></span></p>
<p>force docker deploy to pull new images <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vYnkvbW9ieS9pc3N1ZXMvMzA5NTE=">https://github.com/moby/moby/issues/30951<i class="fa fa-external-link-alt"></i></span></p>
<p>Docker Swarm - 节点管理 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80OGRkNWZmZjcxNTA=">https://www.jianshu.com/p/48dd5fff7150<i class="fa fa-external-link-alt"></i></span></p>
<p>docker stack /swarm 替代 docker-compose 进行部署 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHVhbm1hbnN0ZWluL3AvMTE2MDUwNzEuaHRtbA==">https://www.cnblogs.com/xuanmanstein/p/11605071.html<i class="fa fa-external-link-alt"></i></span></p>
<p>Docker Compose <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9kb2NrZXIvZG9ja2VyLWNvbXBvc2UuaHRtbA==">https://www.runoob.com/docker/docker-compose.html<i class="fa fa-external-link-alt"></i></span></p>
<p>清理docker的image <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcWlhbmRlaGVuZy9wLzEyMTIxMjYzLmh0bWw=">https://www.cnblogs.com/qiandeheng/p/12121263.html<i class="fa fa-external-link-alt"></i></span></p>
<p>docker的stack和service <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE2OTEyMjU3L2FydGljbGUvZGV0YWlscy84MzM1MTQ3OQ==">https://blog.csdn.net/qq_16912257/article/details/83351479<i class="fa fa-external-link-alt"></i></span></p>
<p>docker 常用命令，docker启动,重启,关闭命令 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tL2FydGljbGVzLzkxYmJkOWVhMzVjMTE3ZTFkODNiYjY0ODdiYmNjNzU1Lmh0bWw=">https://www.huaweicloud.com/articles/91bbd9ea35c117e1d83bb6487bbcc755.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gitea drone CI</title>
    <url>/2021/07/06/gitea%20drone%20CI/</url>
    <content><![CDATA[<p>搭建 <code>gitea</code> 仓库以及 <code>drone</code> <code>CI</code> 工具。</p>
<p>因为在用的服务器是低性能<code>4G</code>的服务器，勉强能跑起来<code>gitlab</code>，再加上 <code>gitlab runner</code> 跑的比较艰难，所以研究研究 <code>gitea</code>与<code>drone</code>方案；<br>嗯，坑还不少。</p>
<p>按照文档以及他人的方案进行部署，发现基本上都能跑起来，但是，也只是能跑起来，如何用起来，并没有如何说明，所以在此处做一个记录。</p>
<h1 id="完成图"><a href="#完成图" class="headerlink" title="完成图"></a>完成图</h1><p><img src="/images/20210221/drone.png" alt="drone完成图"></p>
<span id="more"></span>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>注意<code>gitea</code>、<code>drone</code>与<code>drone runner</code>之间的网络互通问题。</li>
<li>当部署在同一个机器上的时候，注意 <code>DRONE_GITEA_SERVER</code> 、 <code>DRONE_SERVER_HOST</code> 、 <code>DRONE_HOST</code> 、 <code>DRONE_RPC_HOST</code> 这几个参数，很容易就出现<code>gitea</code> 回调 <code>drone</code> 失败，<br><code>drone</code> 回调 <code>gitea</code> 检查授权失败。</li>
<li>如果外部端口与内部端口不一致，<code>nginx</code> 部分请加上对应的端口监听。</li>
<li>定义了<code>networks</code>或者<code>drone-runner</code>设置了<code>DRONE_RUNNER_NETWORKS</code>，需要设置<code>external: true</code>，并且执行<code>docker network create 网络名</code>，否则拉取数据将会出错。</li>
<li>如果所有都搭建完成，<code>drone</code>也能识别项目，并且能够启动流水线，但永远都在 <code>Pending</code>，很有可能是 <code>drone-runner</code> 未启动成功，或者 <code>drone-runner</code> <code>platform</code> 对不上；<br>举个例子：<code>Apple Silicon</code> 的 <code>docker</code> 仅支持<code>platform:os: linux,arch: arm64</code>！！！</li>
<li>创建完仓库之后，需要在<code>drone</code>激活仓库，否则，<code>推送</code>等<code>流水线</code>操作<strong>没有任何反应</strong>。</li>
<li><code>drone</code>只能绑定到用户上，不能全局绑定。</li>
</ol>
<p>将两个配置配好之后，执行启动命令，即可。</p>
<p>一些其他方面的参考：<span class="exturl" data-url="aHR0cHM6Ly9yYWJiaXQ1Mi5jb20vMjAxOC8wNi9kcm9uZS1zdGFydC1ndWlkZS8=">https://rabbit52.com/2018/06/drone-start-guide/<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加一个 docker 网络 这里为：gitea_net</span></span><br><span class="line">docker network create gitea_net</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成路径为 gitea ： /user/settings/applications</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在用户设置内的应用里面增加设置</span></span><br><span class="line">DRONE_GITEA_CLIENT_ID=GITEA里面生成的ID DRONE_GITEA_CLIENT_SECRET=GITEA里面生成的SECRET DRONE_RPC_SECRET=自定义的DRONE_RPC_SECRET docker-compose up</span><br></pre></td></tr></table></figure>

<h1 id="gitea-drone-conf-配置"><a href="#gitea-drone-conf-配置" class="headerlink" title="gitea_drone.conf 配置"></a>gitea_drone.conf 配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitea</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">10080</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">gitea.kekxv.com;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">resolver</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.11</span> <span class="string">ipv6=off;</span></span><br><span class="line">    <span class="string">set</span> <span class="string">$upstream_endpoint</span> <span class="string">http://gitea:3000;</span></span><br><span class="line">    <span class="string">client_max_body_size</span> <span class="string">500M;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_set_header</span>            <span class="string">Host</span> <span class="string">$http_host;</span></span><br><span class="line">        <span class="string">proxy_pass</span>                  <span class="string">$upstream_endpoint;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># drone</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">10080</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">drone.kekxv.com;</span></span><br><span class="line">    <span class="string">resolver</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.11</span> <span class="string">ipv6=off;</span></span><br><span class="line">    <span class="string">set</span> <span class="string">$upstream_endpoint</span> <span class="string">http://drone-server;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_set_header</span>            <span class="string">Host</span> <span class="string">$http_host;</span></span><br><span class="line">        <span class="string">proxy_pass</span>                  <span class="string">$upstream_endpoint;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="docker-compose-yml-配置"><a href="#docker-compose-yml-配置" class="headerlink" title="docker-compose.yml 配置"></a>docker-compose.yml 配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://docs.gitea.io/en-us/install-with-docker/</span></span><br><span class="line"><span class="comment"># https://docs.drone.io/installation/gitea/multi-machine/</span></span><br><span class="line"><span class="comment"># https://docs.drone.io/administration/agents/linux-amd64/</span></span><br><span class="line"><span class="comment"># https://github.com/drone/drone-yaml-v1/blob/master/samples/5_parallel.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reverseproxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">reverseproxy</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/conf.d/:/etc/nginx/conf.d/</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">gitea_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">gitea.kekxv.com</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">drone.kekxv.com</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_NAME=Gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MODE=prod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ROOT_URL=http://gitea.kekxv.com/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SECRET_KEY=$&#123;GITEA_SECRET_KEY&#125;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitea:/data</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_ADMIN=kekxv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:kekxv,admin:true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PORT=:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=sqlite3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_SERVER=http://gitea.kekxv.com:10080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_ID=$&#123;DRONE_GITEA_CLIENT_ID&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_SECRET=$&#123;DRONE_GITEA_CLIENT_SECRET&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=drone.kekxv.com:10080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_HOST=http://drone.kekxv.com:10080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_TLS_AUTOCERT=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_AGENTS_ENABLED=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./drone/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./drone/drone:/var/lib/drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea_net</span></span><br><span class="line">  <span class="attr">drone-runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=drone.kekxv.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=DRONE_RUNNER_NAME</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_TRACE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NETWORKS=gitea_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea_net</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reverseproxy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea_net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gitea</category>
      </categories>
      <tags>
        <tag>ci</tag>
        <tag>gitea</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>github actions CI 自动编译测试</title>
    <url>/2021/01/06/github%20actions%20CI%20%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>最近在整一个复合类的项目（<code>cmake</code>项目），期望是跨平台，所以需要在各个平台上编译测试。</p>
<p>但是每次改完代码还要开个虚拟机编译测试，还挺麻烦的，于是试了下 github 的 actions 自动 CI 工具，还挺好的，目前已为项目自动编译 <code>Windows</code>、<code>Linux</code>、<code>MacOS</code> 平台。</p>
<span id="more"></span>

<h1 id="cmake-使用"><a href="#cmake-使用" class="headerlink" title="cmake 使用"></a>cmake 使用</h1><p>cmake : <img src="https://github.com/ClangTools/clangTools/workflows/C/C++%20CI/badge.svg" style="display: inline; margin-bottom: 0;" /></p>
<p>那么如何使用这个那么好的功能呢？</p>
<p>其实很简单：</p>
<ol>
<li>创建目录 <code>.github/workflows</code></li>
<li>创建一个 <code>yml</code> 后缀格式文件，例如 <code>ccpp.yml</code>。</li>
<li>然后将下面内容输入到创建的<code>yml</code>格式文件里面：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">C/C++</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span>,<span class="string">dev</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span>,<span class="string">dev</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">ubuntu-build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configure</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mkdir</span> <span class="string">build-ubuntu</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">build-ubuntu</span> <span class="string">&amp;&amp;</span> <span class="string">cmake</span> <span class="string">-DCMAKE_CXX_FLAGS=&quot;-Werror&quot;</span> <span class="string">..</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cmake</span> <span class="string">--build</span> <span class="string">build-ubuntu</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">win-build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configure</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mkdir</span> <span class="string">build-windows</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">build-windows</span> <span class="string">&amp;&amp;</span> <span class="string">cmake</span> <span class="string">..</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cmake</span> <span class="string">--build</span> <span class="string">build-windows</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">macOS-build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macOS-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configure</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mkdir</span> <span class="string">build-macOS</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">build-macOS</span> <span class="string">&amp;&amp;</span> <span class="string">cmake</span> <span class="string">-DCMAKE_CXX_FLAGS=&quot;-Werror&quot;</span> <span class="string">..</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cmake</span> <span class="string">--build</span> <span class="string">build-macOS</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>jobs</code>  表示工作任务。</li>
<li><code>macOS-build:</code>、<code>win-build:</code>、<code>ubuntu-build:</code> 表示任务标签。</li>
<li><code>runs-on:</code> 表示所运行的系统：<code>ubuntu-latest</code>,<code>windows-latest</code>,<code>macOS-latest</code>。</li>
<li><code>- name:</code>当前项的别名</li>
<li><code>run:</code>执行的命令</li>
</ol>
<p>该文件的作用就是，分别在<code>ubuntu</code>，<code>Windows</code>以及<code>macOS</code>里面编译一边。</p>
<p>比之前自己手动下拉编译简单多了。</p>
<h1 id="bazel"><a href="#bazel" class="headerlink" title="bazel"></a>bazel</h1><p>另外，还尝试给项目加上了 <code>bazel</code> 编译：</p>
<p>bazel : <img src="https://github.com/ClangTools/clangTools/workflows/bazel-build%20CI/badge.svg" style="display: inline; margin-bottom: 0;" /></p>
<p>对应的文件可以为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">bazel-build</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span>,<span class="string">dev</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span>,<span class="string">dev</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ubuntu-build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ngalaiko/bazel-action/1.2.1@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">build</span> <span class="string">//...</span></span><br></pre></td></tr></table></figure>

<h1 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h1><p>对了，项目地址是：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NsYW5nVG9vbHMvY2xhbmdUb29scw==">https://github.com/ClangTools/clangTools<i class="fa fa-external-link-alt"></i></span></p>
<p>欢迎 <code>star</code> 、 <code>fork</code>。</p>
]]></content>
      <categories>
        <category>ci</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab pages jekyll 自动部署</title>
    <url>/2021/01/06/gitlab%20pages%20jekyll%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>本篇简单的介绍一下如何使用<code>gitlab</code>搭建<code>jekyll</code>静态<code>blog</code>。感兴趣的可以看看。</p>
<p>这里使用的是当前 blog 模板，各位可以做个参考。</p>
<span id="more"></span>

<h1 id="使用到的工具"><a href="#使用到的工具" class="headerlink" title="使用到的工具"></a>使用到的工具</h1><ul>
<li><code>ruby</code></li>
<li><code>gcc</code>、<code>g++</code>、<code>make</code>(部分包需要本地编译)</li>
<li><code>bundler</code> </li>
<li><code>jekyll</code> </li>
</ul>
<p>为了编译的速度以及节省时间，我使用了 <code>node:10-alpine</code>的<code>docker</code>镜像。</p>
<p>在开始的时候，我们需要将一些必需文件进行安装。</p>
<p>为了安装速度，我们可以选择使用国内源，<del>比如淘宝源码</del> 改用<strong>清华大学源</strong>，<strong>靠谱</strong>：</p>
<p><code>Ruby</code>修改国内源方式为在<code>Gemfile</code>文件头部增加清华源地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> <span class="string">&#x27;https://rubygems.org&#x27;</span></span></span><br><span class="line">source &#x27;https://mirrors.tuna.tsinghua.edu.cn/rubygems/&#x27;</span><br></pre></td></tr></table></figure>

<p><code>apk</code> 包管理同样使用<strong>清华源</strong>修改源方式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories</span><br></pre></td></tr></table></figure>

<p>(我们可以将该命令放置在<code>CI</code>文件里)</p>
<h1 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a><code>.gitlab-ci.yml</code></h1><p>CI 文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:10-alpine</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$&#123;CI_COMMIT_REF_NAME&#125;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> <span class="string">/etc/apk/repositories</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apk</span> <span class="string">add</span> <span class="string">ruby</span> <span class="string">ruby-dev</span> <span class="string">openssl-dev</span> <span class="string">gcc</span> <span class="string">g++</span> <span class="string">make</span> <span class="string">zlib-dev</span> <span class="string">git</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gem</span> <span class="string">install</span> <span class="string">bundler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">jekyll</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">_site</span> <span class="string">public</span></span><br><span class="line">    <span class="comment"># - bundle exec htmlproofer ./_site --check-html</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>为了成功编译出静态<code>blog</code>，我们先在<code>before_script</code>进行必要的一些工具的安装。</p>
<p><del>在 <code>pages</code> 项目里，<code>artifacts.paths</code>值<code>_site</code>为当前项目生成的静态blog目录，部分模板生成目录为<code>public</code>。请根据实际情况进行修改。</del></p>
<p><strong>在 <code>pages</code> 项目里，<code>artifacts.paths</code>值 <code>public</code>为当前项目生成的静态blog目录，必须为 <code>public</code>。</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0bGFiLXBhZ2VzLmh0bWw=">将 Hexo 部署到 GitLab Pages<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==">清华镜像源地址:https://mirrors.tuna.tsinghua.edu.cn<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle发布到github packages</title>
    <url>/2021/08/03/gradle%E5%8F%91%E5%B8%83%E5%88%B0github%20packages/</url>
    <content><![CDATA[<p>最近弄了个<code>Android</code>的模拟自动注入的库，在给别人用的时候，需要发送 <code>jar</code> 或者 <code>aar</code> 给对方，这就导致我可能需要保留一份，否则每次都需要重新编译生成。为了 <del>偷懒</del><br>增加效率，在查询资料之后，将其发布到了<code>github packages</code>。</p>
<p>准备工作：需要<code>github</code>账号（废话），生成<code>GitHub token</code>需要有写权限（如果只是使用不需要，如果需要推送则需要），将账号(<code>GITHUB_USER</code>)<br>和<code>token</code>(<code>GITHUB_PERSONAL_ACCESS_TOKEN</code>)配置到用户目录下<code>~/.gradle/gradle.properties</code>。</p>
<blockquote>
<p>注意事项：</p>
<p>如果发布返回4**系列错误，原因可能是这几个：</p>
<ol>
<li><code>GroupPageId</code>或者<code>ArtificatId</code>使用了大写，需要改为小写。</li>
<li>当前<code>GroupPageId</code>或者<code>ArtificatId</code>已经在使用了！！！，需要修改，或者把在使用的删掉。。。。</li>
<li>账号密码(<code>Token</code>)错误。</li>
</ol>
</blockquote>
<span id="more"></span>

<p>新建或者使用已有仓库，新建 <code>Android library</code> 项目（<code>id &#39;com.android.library&#39;</code>）。</p>
<p>修改<code>library</code>项目的<code>build.gradle</code>配置（不要改错了）:</p>
<p>1.</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id &#x27;com.android.library&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>改为</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id &#x27;com.android.library&#x27;</span><br><span class="line">  id &#x27;maven-publish&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="2">
<li>增加函数定义</li>
</ol>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//def githubProperties = new Properties()</span><br><span class="line">//githubProperties.load(new FileInputStream(rootProject.file(&quot;github.properties&quot;))) //Set env variable GPR_USER &amp; GPR_API_KEY if not adding a properties file</span><br><span class="line">def getGroupPageId = &#123; -&gt;</span><br><span class="line">    return &quot;com.kekxv&quot; // Replace with version Name</span><br><span class="line">&#125;</span><br><span class="line">def getVersionName = &#123; -&gt;</span><br><span class="line">    return &quot;0.2.4&quot; // Replace with version Name</span><br><span class="line">&#125;</span><br><span class="line">def getArtificatId = &#123; -&gt;</span><br><span class="line">    return &quot;autowired&quot; // Replace with library name ID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li>增加</li>
</ol>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task sourceJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier &quot;sources&quot;</span><br><span class="line">&#125;</span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        // Creates a Maven publication called &quot;release&quot;.</span><br><span class="line">        release(MavenPublication) &#123;</span><br><span class="line">            groupId getGroupPageId()</span><br><span class="line">            artifactId getArtificatId()</span><br><span class="line">            version getVersionName()</span><br><span class="line">            artifact(&quot;$buildDir/outputs/aar/$&#123;getArtificatId()&#125;-release.aar&quot;)</span><br><span class="line"></span><br><span class="line">            artifact(sourceJar)</span><br><span class="line">            pom.withXml &#123;</span><br><span class="line">                final dependenciesNode = asNode().appendNode(&#x27;dependencies&#x27;)</span><br><span class="line">                ext.addDependency = &#123; Dependency dep, String scope -&gt;</span><br><span class="line">                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == &quot;unspecified&quot;)</span><br><span class="line">                        return</span><br><span class="line">                    final dependencyNode = dependenciesNode.appendNode(&#x27;dependency&#x27;)</span><br><span class="line">                    dependencyNode.appendNode(&#x27;groupId&#x27;, dep.group)</span><br><span class="line">                    dependencyNode.appendNode(&#x27;artifactId&#x27;, dep.name)</span><br><span class="line">                    dependencyNode.appendNode(&#x27;version&#x27;, dep.version)</span><br><span class="line">                    dependencyNode.appendNode(&#x27;scope&#x27;, scope)</span><br><span class="line">                    if (!dep.transitive) &#123;</span><br><span class="line">                        final exclusionNode = dependencyNode.appendNode(&#x27;exclusions&#x27;).appendNode(&#x27;exclusion&#x27;)</span><br><span class="line">                        exclusionNode.appendNode(&#x27;groupId&#x27;, &#x27;*&#x27;)</span><br><span class="line">                        exclusionNode.appendNode(&#x27;artifactId&#x27;, &#x27;*&#x27;)</span><br><span class="line">                    &#125; else if (!dep.properties.excludeRules.empty) &#123;</span><br><span class="line">                        final exclusionNode = dependencyNode.appendNode(&#x27;exclusions&#x27;).appendNode(&#x27;exclusion&#x27;)</span><br><span class="line">                        dep.properties.excludeRules.each &#123; ExcludeRule rule -&gt;</span><br><span class="line">                            exclusionNode.appendNode(&#x27;groupId&#x27;, rule.group ?: &#x27;*&#x27;)</span><br><span class="line">                            exclusionNode.appendNode(&#x27;artifactId&#x27;, rule.module ?: &#x27;*&#x27;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                configurations.compile.getDependencies().each &#123; dep -&gt; addDependency(dep, &quot;compile&quot;) &#125;</span><br><span class="line">                configurations.api.getDependencies().each &#123; dep -&gt; addDependency(dep, &quot;compile&quot;) &#125;</span><br><span class="line">                configurations.implementation.getDependencies().each &#123; dep -&gt; addDependency(dep, &quot;runtime&quot;) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">//        maven &#123;</span><br><span class="line">//            url &quot;$buildDir/repo&quot;</span><br><span class="line">//        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = &quot;GitHubPackages&quot;</span><br><span class="line">            url = uri(&quot;https://maven.pkg.github.com/用户名所有者/仓库名/&quot;)</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username = System.getenv(&#x27;GITHUB_USER&#x27;) ?: project.properties[&#x27;GITHUB_USER&#x27;]</span><br><span class="line">                password = System.getenv(&#x27;GITHUB_PERSONAL_ACCESS_TOKEN&#x27;) ?: project.properties[&#x27;GITHUB_PERSONAL_ACCESS_TOKEN&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publish.dependsOn(build)</span><br></pre></td></tr></table></figure>

</blockquote>
<p>配置完成之后，在<code>AndroidStudio</code>右侧标签点击 <code>Gradle</code> ，选择<code>library</code>项目，点开<code>publishing</code>，执行<code>publish</code>，如果没有意外并且账号(<code>GITHUB_USER</code>)<br>和<code>token</code>(<code>GITHUB_PERSONAL_ACCESS_TOKEN</code>)配置正确，你将可以在你的仓库<code>packages</code><br>可以看到项目，例如：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0phdmFSZXBvL3BhY2thZ2Vz">https://github.com/kekxv/JavaRepo/packages<i class="fa fa-external-link-alt"></i></span> 。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><strong>引入方式</strong>：</p>
<blockquote>
<p>以下配置均在项目<code>build.gradle</code>下</p>
<p>方式一</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vZnJlZS1wcm8tdGVhbUBsYXRlc3QvZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbg==">生成 GitHub Token，教程点击本链接<i class="fa fa-external-link-alt"></i></span></li>
<li>配置 <code>gradle</code> ，增加仓库<code>https://maven.pkg.github.com/kekxv/JavaRepo/</code> ，github 的仓库需要授权（公开的也要），自己配置一下 <code>GITHUB_USER</code>、<code>GITHUB_PERSONAL_ACCESS_TOKEN</code>，建议在家目录的<code>gradle.properties</code>进行配置。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//配置gradle</span><br><span class="line">android &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = &quot;GitHubPackages&quot;</span><br><span class="line">            url = uri(&quot;https://maven.pkg.github.com/kekxv/JavaRepo/&quot;)</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username = System.getenv(&#x27;GITHUB_USER&#x27;) ?: project.properties[&#x27;GITHUB_USER&#x27;]</span><br><span class="line">                password = System.getenv(&#x27;GITHUB_PERSONAL_ACCESS_TOKEN&#x27;) ?: project.properties[&#x27;GITHUB_PERSONAL_ACCESS_TOKEN&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>增加 <code>dependencies</code> <code>implementation &#39;com.kekxv:autowired:0.2.3&#39;</code> (<code>0.2.3</code>为版本号，可更改为最新版本)</li>
</ol>
<p>方式二</p>
<p>直接下载前往 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0phdmFSZXBvL3BhY2thZ2Vz">仓库<i class="fa fa-external-link-alt"></i></span> 下载<code>autowired-0.2.3.aar</code>导入到项目。<br>根据情况，可能需要将<code>autowired-0.2.3.aar</code> 拷贝到<code>libs</code> 目录并 <code>implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</code> 更改为<code>implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;,&quot;*.aar&quot;])</code></p>
</blockquote>
<p>参考文档</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vZnJlZS1wcm8tdGVhbUBsYXRlc3QvcGFja2FnZXMvZ3VpZGVzL2NvbmZpZ3VyaW5nLWdyYWRsZS1mb3ItdXNlLXdpdGgtZ2l0aHViLXBhY2thZ2Vz">配置 Gradle 用于 GitHub 包<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9hbmRyb2lkZGV2LmNvbS9hbmRyb2lkLWxpYnJhcmllcy1vbi1naXRodWItcGFja2FnZXMtMjFmMTM1MTg4ZDU4">Android Libraries on GitHub Packages<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hello github.io blog</title>
    <url>/2020/12/06/hello%20github.io%20blog/</url>
    <content><![CDATA[<p>hello github.io blog</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
  </entry>
  <entry>
    <title>java PipedInputStream 管道吐槽</title>
    <url>/2021/03/07/java%20PipedInputStream%20Pipeline/</url>
    <content><![CDATA[<p>最近业务上需要使用到管道，做数据缓存和通讯，使用了<code>PipedInputStream</code>、<code>PipedOutputStream</code>。记录一下一个隐藏的坑！</p>
<p>在项目初期，所有调用均为正常，数据也能正常写入读取管道，遂提交代码，并且交由他人使用。</p>
<p>然，增加功能以及业务调用之后，无法读取到数据？？？？并且在进行<strong>管道写</strong>的时候报错<code>Java io ioexception read end dead</code>？？？？？？？？？？</p>
<span id="more"></span>

<p>什么情况？在查看源代码并且在源码中搜索关键字<code>read end dead</code>后找到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipedInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他代码 ...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkStateForReceive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Pipe not connected&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (closedByWriter || closedByReader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Pipe closed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readSide != <span class="keyword">null</span> &amp;&amp; !readSide.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Read end dead&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>readSide</code>定义为<code>Thread readSide;</code>？？？</p>
<p>这干嘛的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipedInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 其他代码 ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Pipe not connected&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (closedByReader) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Pipe closed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeSide != <span class="keyword">null</span> &amp;&amp; !writeSide.isAlive()</span><br><span class="line">                   &amp;&amp; !closedByWriter &amp;&amp; (in &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Write end dead&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        readSide = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 其他代码 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>readSide = Thread.currentThread();</code>？？？每次进行读的时候获取当前读线程的线程？？有什么用？</p>
<p><img src="/images/20210807/readSide_use.png" alt="readSide use"></p>
<p>开起来似乎，没有任何用处啊？！</p>
<p>这内部为什么获取读的线程之后除了判断线程死活之外没有任何限制？</p>
<p><strong>而且问题是，读的线程死活关你管道写什么事？</strong> 为什么写入管道数据的时候，需要判断读的线程是否存活？</p>
<p>如果要保证读写线程为一对的，但为什么每次读的时候又去更新<code>readSide = Thread.currentThread();</code>？难道不应该是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(readSide==<span class="keyword">null</span>)readSide=Thread.currentThread();</span><br><span class="line"><span class="keyword">assert</span>(readSide==Thread.currentThread();)</span><br></pre></td></tr></table></figure>

<p>每次调用读的时候去更新的话，那还有什么意义？</p>
<p>而且，最为关键的是，只有在调用 <code>read</code> 读的时候才会更新，并且没有办法使用其他方式更新(哦，好像可以用反射)；这也就导致，我没有办法在写之前告诉他，我<code>读</code>还活着！！！</p>
<p>最后，为了解决这个问题，只能引入一个线程池的方式，使用线程池统一去读取；类似以下例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建固定大小的线程池:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executor = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PipedInputStream pipedInputStream = <span class="keyword">new</span> PipedInputStream(<span class="number">10</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(() -&gt; pipedInputStream.read()).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：省略了其他的多余代码。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>linux</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>kProxyCpp 服务端软件</title>
    <url>/2021/08/07/kProxyCpp%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>承接自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tIdHRwZA==">kHttpd<i class="fa fa-external-link-alt"></i></span> 项目。</p>
<p>由于 <code>kHttpd</code> 项目使用了 <code>libevent</code> 开源库，其中某些特性导致使用上面不太方面（仅仅指的是我个人而言），所以重新开发了本项目。</p>
<h1 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h1><ol>
<li><p><code>http server</code> 实现， <code>http server</code> 服务端功能，使用线程池为每个连接进行处理，所以每个请求都可以阻塞（但是并不建议，除非某种特定的场景，例如进行http代理服务，必须等到对方回应，不使用 <code>libevent</code> 其中一个原因）。</p>
</li>
<li><p><code>WebSocket server</code> 实现，当前项目实现了<code>WebSocket server</code>端代码，可以使用 c/c++ 愉快的开发<code>WebSocket</code>项目，同时<code>WebSocket</code>服务端也支持<code>http server</code>，也就是同一个端口同时使用<code>WebSocket server</code> 以及 <code>http server</code>，使得更方便一些。使用<code>WebSocket server</code>的情况下，请根据实际情况，加大线程数量以及监听数量，否则可能造成后续连接被阻塞。</p>
</li>
<li><p><code>CGI</code> 功能实现，目前实现 <code>CGI</code> 调用 <code>php</code>，可以使用<code>php</code>作为动态脚本进行开发，不过现在还未实现 <code>php</code>的<code>POST</code>模式，即还未将 <code>php</code> <code>body</code>数据传入给<code>CGI</code>。</p>
</li>
</ol>
<span id="more"></span>

<h1 id="为什么要开发本项目"><a href="#为什么要开发本项目" class="headerlink" title="为什么要开发本项目"></a>为什么要开发本项目</h1><p>目前的 CPU 性能已经非常好了，同时像 <code>c#</code>，<code>php</code>，<code>Java</code>，<code>nodejs</code>，<code>go</code> 等等语言对于<code>http server</code>以及<code>WebSocket server</code>开发已经非常棒了，为什么还要造这种轮子呢？</p>
<p>的确，他们非常好，但是某些情况下，我还是喜欢使用 <code>c/c++</code> 来进行开发（应该有人和我一样吧）。</p>
<p>在某些项目上，需要使用到 <code>OpenCV</code> 进行图像处理，嗯，<code>C#</code> 也有<code>EmguCV</code>以及<code>OpenCVSharp</code>等等，使用起来也很方便，不过总觉得不太方便，可能是 <code>c/c++</code> 写多了，毕竟身边的大多数人，都是比较喜欢使用 <code>EmguCV</code>以及<code>OpenCVSharp</code>。</p>
<p>在上述的这些项目上，如果要发布为<code>WebAPI</code>形式，也有不少的选择，但是基本需要第三方工具（当然用 <code>libevent</code> 等项目也是不错的），我希望能够很简单的就讲项目发布为WebAPI，所以我决定开发了本项目（为什么不用 <code>libevent</code> 的<code>http server</code>呢？emmmmm，前面说了）。</p>
<h1 id="树莓派-zero"><a href="#树莓派-zero" class="headerlink" title="树莓派 zero"></a>树莓派 zero</h1><p>目前<code>树莓派 4B</code> 已经出来蛮久的了，性能也很强，不过如果追求的小的解决方案，当时是选择 <code>树莓派zero</code>，但是<code>树莓派zero</code>性能并没有特别优秀，如果使用<code>python</code>、<code>nodejs</code>之类做服务端的话，你知道我想说什么了吧，没错，可以考虑一下本项目。</p>
<p>当然了，如果想开发整站项目，emmmmm，还是不要选择本项目了吧，太为难自己了，本项目比较适合简单的项目之上。</p>
<h1 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h1><p>如果想要学习一下 <code>http server</code> 或者 <code>WebSocket server</code> 或者 <code>CGI</code> 实现的话，也可以看看本项目的代码，希望能对你有帮助。</p>
<h1 id="版权问题"><a href="#版权问题" class="headerlink" title="版权问题"></a>版权问题</h1><p>如果使用了本项目开发了开源项目或者修改的项目，欢迎贴上本项目链接</p>
<p>当前项目上使用了部分开源或者网络上的代码，如果这些代码是您的，并且有侵犯到您的个人利益，请联系我，我会根据实际情况，在此贴上您的源链接，或者进行修改删除。</p>
]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>nmcli 简单用法</title>
    <url>/2021/07/16/nmcli%20%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>在Linux系列下，我们连接WiFi的时候，可以使用nmcli作为管理工具，进行WiFi连接断开等操作，操作也相对方便。</p>
<p><code>nmcli</code> 不仅仅支持操作 <code>Wi-Fi</code>，还支持操作所有网络设备</p>
<blockquote>
<p>提示：<br>在<code>centos7</code>某些情况下，以太网并没有自动连接网络，可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection modify &quot;设备名(ens33)&quot; connection.autoconnect yes</span><br></pre></td></tr></table></figure>
<p>设置自动管理，且开机自动连接。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装方式可以使用 apt 或者 yum 包管理器安装。</p>
<h1 id="扫描无线网络"><a href="#扫描无线网络" class="headerlink" title="扫描无线网络"></a>扫描无线网络</h1><p>使用外观模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> nmcli  --pretty device wifi list  [ifname wlan0]</span></span><br><span class="line"></span><br><span class="line">========================================================================</span><br><span class="line">                        Wi-Fi 扫描列表 (wlp3s0)</span><br><span class="line">========================================================================</span><br><span class="line">*  SSID        模式  频段  速率       信号  BARS  安全性    </span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">*  JZ_TECH     红外  1     54 Mbit/s  81    ▂▄▆█  WPA1 WPA2 </span><br><span class="line">   JZ_TECH_5G  红外  149   54 Mbit/s  69    ▂▄▆_  WPA1 WPA2 </span><br><span class="line">   jzplus      红外  5     54 Mbit/s  59    ▂▄▆_  WPA1 WPA2 </span><br><span class="line">   IPLUS2.4G   红外  13    54 Mbit/s  54    ▂▄__  WPA2      </span><br><span class="line">   jzplus_5G   红外  36    54 Mbit/s  49    ▂▄__  WPA1 WPA2 </span><br><span class="line">   IPLUS5G     红外  161   54 Mbit/s  44    ▂▄__  WPA2  </span><br></pre></td></tr></table></figure>

<h1 id="连接WiFi热点"><a href="#连接WiFi热点" class="headerlink" title="连接WiFi热点"></a>连接WiFi热点</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> [sudo] nmcli -w 10 device wifi connect <span class="string">&#x27;SSID&#x27;</span>  password <span class="string">&#x27;PASSWORD&#x27;</span></span></span><br><span class="line">设备 “wlan0” 已成功由“c425769f-d48f-40a1-8d2a-9137532fea64”激活</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<blockquote>
<p>sudo 部分系统需要管理员权限才能执行该命令，但是可以通过setcap命令附加特殊权限无需sudo ‘SSID’ 为需要连接的无线网络热点名称 ‘PASSWORD’ 无线网络密码</p>
</blockquote>
<h1 id="断开WiFi热点"><a href="#断开WiFi热点" class="headerlink" title="断开WiFi热点"></a>断开WiFi热点</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> [sudo] nmcli device disconnect</span></span><br></pre></td></tr></table></figure>

<h1 id="切换-WIFI-热点"><a href="#切换-WIFI-热点" class="headerlink" title="切换 WIFI 热点"></a>切换 WIFI 热点</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ nmcli connection show</span><br><span class="line">NAME            UUID                                  TYPE  DEVICE</span><br><span class="line">Caesar          05fd480b-d5ed-4598-afed-000db85ec45f  wifi  wlan0</span><br><span class="line">OpenWrt_5G      c1fcda7b-525e-4598-8aa4-000db85ec45f  wifi  --</span><br><span class="line">Pandora         a7e3123f-a920-44bb-b9e5-ec590cff8aa1  wifi  --</span><br><span class="line">kekxv           432243f0-ad55-49ec-8adb-455991876a47  wifi  --</span><br><span class="line"></span><br><span class="line">➜ nmcli con up uuid 05fd480b-d5ed-4598-afed-000db85ec45f # 切换为指定WiFi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L295b3VuZ18yMDEyL2FydGljbGUvZGV0YWlscy84OTkyMzQxMQ==">Linux环境下使用nmcli管理无线网络<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Njc1NTUzNi9hcnRpY2xlL2RldGFpbHMvMTE1NTI1MjAx">centos8 设置网卡开机自启<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>reposync 同步镜像源</title>
    <url>/2021/08/01/reposync%20%E5%90%8C%E6%AD%A5%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>某些情况下，我们只有内网的环境，无法很好的使用 <code>yum</code> 镜像源，进行安装，所以我们可以选择搭建本地镜像源站来使用。</p>
<p>本地镜像源站最简单的方式是使用安装的<code>光盘</code>或者<code>ISO</code>文件作为资源站点。</p>
<span id="more"></span>

<h1 id="使用光盘"><a href="#使用光盘" class="headerlink" title="使用光盘"></a>使用光盘</h1><p>将光盘或者镜像挂载，例如挂载到：<code>/mnt/repo</code> 路径，然后我们需要配置文件：</p>
<p>/etc/yum.repos.d/CentOS-Media.repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Media.repo</span><br><span class="line">[CentOS-Media]</span><br><span class="line">name=CentOS-$releasever - Media</span><br><span class="line">baseurl=file:///mnt/repo/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">#如果不需要gpgcheck，可让gpgcheck=0,然后注释掉最后一行即可。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>挂载ISO可以使用：</p>
<p><code>mount -t iso9660 CentOS-7.iso /mnt/repo</code></p>
</blockquote>
<h1 id="使用-reposync-建立离线镜像站"><a href="#使用-reposync-建立离线镜像站" class="headerlink" title="使用 reposync 建立离线镜像站"></a>使用 reposync 建立离线镜像站</h1><p>使用 <code>reposync</code> 进行镜像同步，下载远程的资源到本地，好处是能够支持自定义源，支持 <code>docker-ce</code> 、 <code>nginx</code> 等等资源镜站：</p>
<p>同步 docker-ce :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 同步整个资源站点，不太支持，大概3G多</span></span><br><span class="line">reposync --repo docker-ce-stable --download_path=/local/repo/#存储路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只同步最新版本，只拉取最新版本</span></span><br><span class="line">reposync -g -l -m --repoid=docker-ce-stable --newest-only --download-metadata --download_path=/local/repo/#存储路径</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<p>/etc/yum.repos.d/CentOS-local.repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local-$releasever</span><br><span class="line">baseurl=file:///local/repo/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，源站的 <code>repodata</code> 并没有自动下载，需要自行打开手动下载下来。</p>
</blockquote>
<p>然后就可以愉快的使用 <code>yum install</code> 。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p>Setup local YUM repository problem <span class="exturl" data-url="aHR0cHM6Ly9mb3J1bXMuY2VudG9zLm9yZy92aWV3dG9waWMucGhwP3Q9NzE4ODY=">https://forums.centos.org/viewtopic.php?t=71886<i class="fa fa-external-link-alt"></i></span></p>
<p>CentOS7如何利用本地光盘制作yum源 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tL2FydGljbGVzLzQ4NGRkNzhhMGU1NmJjZmZmODIyNTk1YWVhMDMwN2ZkLmh0bWw=">https://www.huaweicloud.com/articles/484dd78a0e56bcfff822595aea0307fd.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 隧道端口转发</title>
    <url>/2021/08/07/ssh%20%E9%9A%A7%E9%81%93%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>在部分情况下，没有办法直接访问到目标机器，需要通过中转的方式进行访问，一般使用代理，或者VPN等组网方式，使用端口转发的方式其实也是不错的。</p>
<p>这里简单介绍一下 <code>ssh</code> 的代理方式.</p>
<span id="more"></span>

<h1 id="ssh-端口转发"><a href="#ssh-端口转发" class="headerlink" title="ssh 端口转发"></a>ssh 端口转发</h1><p><code>ssh -f user@server -[LR] 3306:server:3306 -N</code></p>
<blockquote>
<p>命令的细分：</p>
<p>ssh：调用ssh。</p>
<p>-f:(从man ssh页面）</p>
<p>  请求ssh在命令执行之前转到后台。如果ssh要求输入密码或密码，但用户希望在后台使用，这很有用。</p>
<p>  本质上，一旦你输入任何密码建立连接，发送到后台; 它将shell提示返回给你。</p>
<p>user@server：您想要登录的远程服务器。</p>
<p>-[LR] 3306:server:3306：</p>
<p>  [bind_address：] port：host：<code>hostport</code>指定将本地（客户端）主机上的给定端口转发到远程端的给定主机和端口。</p>
<p>  因此-L 3306:server:3306将本地端口绑定3306到主机上的远程端口 </p>
<p>  因此-R 3306:server:3306将远程(server)端口3306绑定到主机上的本地端口</p>
<p>  当你连接到本地端口时3306，连接将通过安全通道转发到<code>server</code>。在远程主机上，<code>server</code>然后连接到<code>server</code>端口3306。</p>
<p>-N：不要执行命令。这对于“仅转发端口”（引用手册页）很有用。</p>
</blockquote>
<p><strong>注意</strong>：为了能够在127.0.0.1之外进行监听，还需要修改远程sshd配置文件，增加配置：<br><code>/etc/ssh/sshd_config</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>



<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXNrLzExNTY2NA==">https://cloud.tencent.com/developer/ask/115664<i class="fa fa-external-link-alt"></i></span></p>
<p>How to make an SSH tunnel publicly accessible? <span class="exturl" data-url="aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy81ODg1OTEvaG93LXRvLW1ha2UtYW4tc3NoLXR1bm5lbC1wdWJsaWNseS1hY2Nlc3NpYmxl">https://superuser.com/questions/588591/how-to-make-an-ssh-tunnel-publicly-accessible<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>vue网页简单拼音输入法</title>
    <url>/2021/01/06/vue%20web%20simple%20pinyin%20input/</url>
    <content><![CDATA[<p>当我们在开发嵌入式应用的时候，我们可能不想让输入法的虚拟键盘出现。</p>
<p>因为虚拟键盘可以做到比较多的事情，而且也不容易控制。</p>
<p>例如 PC 上的虚拟键盘就可以执行 Alt F4，或者调出任务管理器，但是很多情况，我们是不允许用户这样操作的。</p>
<span id="more"></span>

<p>英文与数字字符的输入比较简单，直接贴个按钮便可以了，但却苦了咱们大汉字，常用字就有 3755 个（GB2312标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个，参考自：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwNzY3MjczL2Fuc3dlci8xNzk4NjUxNA==">https://www.zhihu.com/question/20767273/answer/17986514<i class="fa fa-external-link-alt"></i></span> ），怎么滴，也不能在界面上贴3千个按钮吧，这不合适。</p>
<p>于是我开始寻找纯网页的输入法，发现有好几种类型，一种是类似控件的形式，侵入系统的方式实现，一种是在线输入法，而网页版离线输入法则基本上没有。</p>
<p>（都用网页了，为什么还要离线？？？emmmmmmm，因为实际环境可能能是离线的，或者是局域网方式，而网页(HTML5)可以更优雅的进行界面开发以及展示）。</p>
<p>翻遍了github，发现大多数不太适合，最终选定了一款，进行定制开发，封装了一层 Vue。方便自己使用。</p>
<p><img src="/images/20210807/995AC07E-6CB4-4086-B790-DBC7156CE855.png" alt="Vue Input Keyboard"></p>
<p><img src="/images/20210807/3C63AA68-C9FF-47D2-8217-D1EC1A770513.png" alt="Vue Input Keyboard"></p>
<p>参考借鉴 ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N4ZWkvcGlueWluanM=">https://github.com/sxei/pinyinjs<i class="fa fa-external-link-alt"></i></span></p>
<p>因为是决定复用切开源的组件，所以内部并没有使用第三方的 <code>UI</code> 直接手写代码，不过也没啥<code>UI</code>要弄得。</p>
<p>封装组件之后,只需要很简单的代码便可以引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pinyin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>拼音输入测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PinYinKeyboard</span> @<span class="attr">on-delete</span>=<span class="string">&quot;DeleteText&quot;</span> @<span class="attr">on-push</span>=<span class="string">&quot;PushText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">PinYinKeyboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PinYinKeyboard <span class="keyword">from</span> <span class="string">&quot;../components/PinYinKeyboard&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;pinyin&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;PinYinKeyboard&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">text</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">log</span>: <span class="built_in">console</span>.log,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">DeleteText</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.text = <span class="built_in">this</span>.text.substr(<span class="number">0</span>, <span class="built_in">this</span>.text.length - <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">PushText</span>(<span class="params">key</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.text += (key);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>组件源码 ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L3Z1ZS1waW55aW5LZXlib2FyZC90cmVlL21hc3Rlci9zcmMvY29tcG9uZW50cw==">https://github.com/kekxv/vue-pinyinKeyboard/tree/master/src/components<i class="fa fa-external-link-alt"></i></span></p>
<p>内部代码也比较简洁，感兴趣的可以自行查看。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派 OLED 屏幕</title>
    <url>/2021/04/06/%E6%A0%91%E8%8E%93%E6%B4%BE%20OLED%20%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<p>最近在研究 <code>IIC</code>(<code>I2C</code>)通讯，所以采购了一款支持 <code>IIC</code> 的<code>OLED</code>屏幕，并将其在<code>树莓派</code>上驱动起来。</p>
<p><img src="/images/20210807/03/202003311249533709127.jpg"></p>
<span id="more"></span>

<p>在 <code>GitHub</code> 上有相关的 <code>Python</code> 驱动代码，效果不错（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkYWZydWl0L0FkYWZydWl0X1B5dGhvbl9TU0QxMzA2">点击查看<i class="fa fa-external-link-alt"></i></span>）。</p>
<p>不过我不是特别喜欢使用 <code>Python</code> 做一些事情，特别是在树莓派上面；虽然 <code>Python</code> 简单，但是对于性能不是特别好，内存也不多的树莓派来说，还是喜欢省一点是一点，所以使用 <code>C++</code> 弄了一个专门的驱动库。</p>
<p>配合 <code>OpenCV</code> 点阵字体库以及图像抖动算法，能够显示简单的图片以及文字（包括<code>中文</code>以及<code>字符表情</code>）。</p>
<p><img src="/images/20210807/03/202003311254524076712.jpg"></p>
<p>实现方式可以参考： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NsYW5nVG9vbHMvY2xhbmdUb29scy9ibG9iL21hc3Rlci9zcmMvb2xlZF90b29sLw==">ClangTools - oled_tool<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="举个栗子-🌰"><a href="#举个栗子-🌰" class="headerlink" title="举个栗子 🌰"></a>举个栗子 🌰</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NsYW5nVG9vbHMvY2xhbmdUb29scy9ibG9iL21hc3Rlci9FeGFtcGxlL3Rlc3Rfb2xlZC5jcHA=">查看源码<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by caesar kekxv on 2020/3/27.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ssd1306.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;logger.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CvxFont.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv_tool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net_tool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">getenv</span>(<span class="string">&quot;DISPLAY&quot;</span>))<span class="built_in">setenv</span>(<span class="string">&quot;DISPLAY&quot;</span>, <span class="string">&quot;localhost:10.0&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">init_default</span>();</span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">d</span>(__FILENAME__, __LINE__, <span class="string">&quot;start&quot;</span>);</span><br><span class="line">    ssd1306 ssd1306;</span><br><span class="line">    ssd1306.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ENABLE_FREETYPE</span></span><br><span class="line">    <span class="function">cv::Mat <span class="title">img</span><span class="params">(<span class="number">64</span>, <span class="number">128</span>, CV_8UC3, cv::Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span></span>; <span class="comment">// create a black background</span></span><br><span class="line"></span><br><span class="line">    <span class="function">cvx::CvxFont <span class="title">font</span><span class="params">(logger::get_local_path() + logger::path_split + <span class="string">&quot;OpenDotMatrixFont.ttf&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">cvx::CvxFont <span class="title">font1</span><span class="params">(logger::get_local_path() + logger::path_split + <span class="string">&quot;seguisym.ttf&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cv::String msg7 = <span class="string">&quot;柒凯计算机软件服务&quot;</span>;</span><br><span class="line">    font.<span class="built_in">putText</span>(img, msg7, cv::<span class="built_in">Point</span>(<span class="number">0</span>, ssd1306::<span class="built_in">GetLineY14</span>(<span class="number">4</span>)));</span><br><span class="line"></span><br><span class="line">    font.<span class="built_in">putText</span>(img, <span class="string">&quot;blog.kekxv.com&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">0</span>, ssd1306::<span class="built_in">GetLineY14</span>(<span class="number">0</span>) * <span class="number">2</span> / <span class="number">3</span>), <span class="number">12</span>);</span><br><span class="line">    std::vector&lt;std::string&gt; ips;</span><br><span class="line">    net_tool::<span class="built_in">GetIP</span>(ips);</span><br><span class="line">    <span class="keyword">int</span> line = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; ip : ips) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ip.<span class="built_in">find</span>(<span class="string">&quot;127&quot;</span>) != std::string::npos)<span class="keyword">continue</span>;</span><br><span class="line">        font.<span class="built_in">putText</span>(img, ip, cv::<span class="built_in">Point</span>(<span class="number">0</span>, ssd1306::<span class="built_in">GetLineY14</span>(line++) * <span class="number">2</span> / <span class="number">3</span>), <span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::Mat qrImg = opencv_tool::<span class="built_in">CreateQrCode</span>(<span class="string">&quot;/assets/imgs/old/&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    cv::Mat roi = <span class="built_in">img</span>(</span><br><span class="line">            cv::<span class="built_in">Rect</span>(<span class="number">127</span> - qrImg.<span class="built_in">size</span>().width, ssd1306::<span class="built_in">GetLineY14</span>(<span class="number">4</span>) - qrImg.<span class="built_in">size</span>().height, qrImg.cols,</span><br><span class="line">                     qrImg.rows));</span><br><span class="line">    qrImg.<span class="built_in">copyTo</span>(roi);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="keyword">uint32_t</span>&gt; symbols;</span><br><span class="line">    symbols.<span class="built_in">push_back</span>((<span class="keyword">uint32_t</span>) <span class="number">0x1f300</span> + <span class="number">32</span> * (<span class="number">14</span> + <span class="number">9</span> - <span class="number">1</span>) + <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">    font1.<span class="built_in">putText</span>(img, symbols, cv::<span class="built_in">Point</span>(<span class="number">127</span> - qrImg.<span class="built_in">size</span>().width - <span class="number">14</span>, ssd1306::<span class="built_in">GetLineY14</span>(<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssd1306.<span class="built_in">draw</span>(&amp;img, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    logger::<span class="built_in">instance</span>()-&gt;<span class="built_in">d</span>(__FILENAME__, __LINE__, <span class="string">&quot;end&quot;</span>);</span><br><span class="line">    <span class="comment">// ssd1306.DisplayState(false);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>raspi</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>raspi</tag>
        <tag>spi</tag>
        <tag>iic</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓模拟自动注入</title>
    <url>/2021/08/05/Android%20simulation%20automatic%20injection/</url>
    <content><![CDATA[<p>本项目是用于模拟自动注入，通过添加注解<code>@Autowired</code>，方便在安卓下能够更好的自动注入自动添加对象，不需要自己给每一个类进行<code>Instance</code>维护。</p>
<span id="more"></span>

<h1 id="在-Android-应用中使用-Dagger"><a href="#在-Android-应用中使用-Dagger" class="headerlink" title="在 Android 应用中使用 Dagger"></a>在 Android 应用中使用 Dagger</h1><p><code>Dagger</code> 效果更好，建议使用，当前项目就作为一个学习的参考项目吧。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvZGVwZW5kZW5jeS1pbmplY3Rpb24vZGFnZ2VyLWFuZHJvaWQ/aGw9emgtY24=">https://developer.android.com/training/dependency-injection/dagger-android?hl=zh-cn<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="安卓模拟自动注入"><a href="#安卓模拟自动注入" class="headerlink" title="安卓模拟自动注入"></a>安卓模拟自动注入</h1><p>源码位置 ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0FuZHJvaWRBdXRvV2lyZWQ=">https://github.com/kekxv/AndroidAutoWired<i class="fa fa-external-link-alt"></i></span></p>
<p>代码下载 ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0FuZHJvaWRBdXRvV2lyZWQvYXJjaGl2ZS9tYXN0ZXIuemlw">AndroidAutoWired.zip<i class="fa fa-external-link-alt"></i></span></p>
<p>仓库 ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0phdmFSZXBvL3BhY2thZ2Vz">Repo<i class="fa fa-external-link-alt"></i></span> 。</p>
<h1 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h1><ol>
<li>扫描所有(或手动传入)带有 <code>@Service</code> 的自动注入类</li>
<li>手动或继承<code>IAutoWired</code> 自动调用 <code>IAutoWired.inject(this);</code> 进行注入。</li>
<li>为保证<code>private</code>也能注入成功；通过反射以及<code>setAccessible(true);</code>修改权限进行<code>newInstance()</code>以及<code>赋值</code>。</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>建议结合仓库源码以及 <a href="Usage.md">Usage.md</a> 一起查看</p>
<h2 id="Service-interface"><a href="#Service-interface" class="headerlink" title="Service : @interface"></a>Service : @interface</h2><p>用于扫描标记，当使用自动扫描的方式，会查找带有 <code>@Service</code> 标记的类进行记录，用于后期进行自动注入创建实例类。</p>
<p>也可以通过手动注入的方式进行传入。</p>
<h3 id="参数-service"><a href="#参数-service" class="headerlink" title="参数 service"></a>参数 service</h3><p>是否是服务类型，如果为 <code>true</code> ； 则自动调用 <code>start</code> 无参函数 ； 默认为 <code>false</code>。</p>
<h2 id="AutoWired-interface"><a href="#AutoWired-interface" class="headerlink" title="AutoWired : @interface"></a>AutoWired : @interface</h2><p>标记为需要自动注入。如果一个对象需要自动注入，则需要添加该注解，将会自动查找实例类并注入。</p>
<h3 id="参数-Sign"><a href="#参数-Sign" class="headerlink" title="参数 Sign"></a>参数 Sign</h3><p>使用不同的 <code>Sign</code> 可以创建不同的对象，默认为空。同一个<code>Sign</code>则会注入同一个对象。</p>
<h3 id="参数-dependencies"><a href="#参数-dependencies" class="headerlink" title="参数 dependencies"></a>参数 dependencies</h3><p>是否在构造函数依赖，如果设置为 <code>true</code> 则会在其他之后注入。默认为<code>false</code>。</p>
<h3 id="参数-Interpretation"><a href="#参数-Interpretation" class="headerlink" title="参数 Interpretation"></a>参数 Interpretation</h3><p>当自动注入类型为 <code>interface</code> 情况下作用；用于获取注入 <code>interface</code> 的对应 <code>class</code>，<strong>如果只有一个<code>class</code>，将会忽略该标注</strong>。</p>
<h2 id="InjectView-interface"><a href="#InjectView-interface" class="headerlink" title="InjectView : @interface"></a>InjectView : @interface</h2><p>需要 <code>setContentView</code> 之后调用 <code>IAutoWired.inject</code>；<strong>只支持 <code>Activity</code> 或者带有自动注入 <code>Activity</code> 的对象</strong>。</p>
<p>该注解将会自动查找相应 <code>View</code> 并进行赋值。</p>
<h3 id="参数-value"><a href="#参数-value" class="headerlink" title="参数 value"></a>参数 value</h3><p>指定查找的的 <code>R.id.*</code> ，例如 <code>@InjectView(R.id.text)</code>。</p>
<h2 id="IAutoWired-class"><a href="#IAutoWired-class" class="headerlink" title="IAutoWired : class"></a>IAutoWired : class</h2><p>注入工具类；可以直接 <code>extends IAutoWired</code> 自动调用注册当前对象。</p>
<h3 id="IAutoWired"><a href="#IAutoWired" class="headerlink" title="IAutoWired"></a>IAutoWired</h3><p>可以直接 <code>extends IAutoWired</code> 将自动调用注册以及注入当前对象，对 <code>new</code> 也起作用。</p>
<h3 id="init-自动扫描初始化"><a href="#init-自动扫描初始化" class="headerlink" title="init 自动扫描初始化"></a>init 自动扫描初始化</h3><p>初始化，并且自动扫描所有 <code>@Service</code> 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="init-手动指定类型"><a href="#init-手动指定类型" class="headerlink" title="init 手动指定类型"></a>init 手动指定类型</h3><p>初始化，手动指定类型，且不进行自动扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Class&lt;?&gt;[]list)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="registered-注册对象"><a href="#registered-注册对象" class="headerlink" title="registered 注册对象"></a>registered 注册对象</h3><p>手动注册对象，多用于注册<code>Context.class</code>与<code>Activity.class</code>；例如：<code>IAutoWired.registered(Context.class, this);</code><br>;<code>IAutoWired.registered(Activity.class, this);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动注册 Sign 为 空 的 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cls    对象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registered</span><span class="params">(Class&lt;?&gt; cls,Object object)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动注册对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cls    对象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Sign   sign</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registered</span><span class="params">(Class&lt;?&gt; cls,Object object,String Sign)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="inject-注入对象"><a href="#inject-注入对象" class="headerlink" title="inject 注入对象"></a>inject 注入对象</h3><p>将会将 <code>source</code> 对象内的带有<code>@AutoWired</code>进行注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object source)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="injectView-注入-View-对象"><a href="#injectView-注入-View-对象" class="headerlink" title="injectView 注入 View 对象"></a>injectView 注入 View 对象</h3><p>将会将 <code>source</code> 对象内的带有<code>@injectView</code>进行注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InjectView</span><span class="params">(Activity activity)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><p>以下配置均在项目<code>build.gradle</code>下</p>
<p>方式一</p>
<blockquote>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vZnJlZS1wcm8tdGVhbUBsYXRlc3QvZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbg==">生成 GitHub Token，教程点击本链接<i class="fa fa-external-link-alt"></i></span></li>
<li>配置 <code>gradle</code> ，增加仓库<code>https://maven.pkg.github.com/kekxv/JavaRepo/</code> ，github 的仓库需要授权（公开的也要），自己配置一下 <code>GITHUB_USER</code>、<code>GITHUB_PERSONAL_ACCESS_TOKEN</code>，建议在家目录的<code>gradle.properties</code>进行配置。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//配置gradle</span><br><span class="line">android &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = &quot;GitHubPackages&quot;</span><br><span class="line">            url = uri(&quot;https://maven.pkg.github.com/kekxv/JavaRepo/&quot;)</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username = System.getenv(&#x27;ACCESS_USER&#x27;) ?: project.properties[&#x27;GITHUB_USER&#x27;]</span><br><span class="line">                password = System.getenv(&#x27;ACCESS_PERSONAL_ACCESS_TOKEN&#x27;) ?: project.properties[&#x27;GITHUB_PERSONAL_ACCESS_TOKEN&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>增加 <code>dependencies</code> <code>implementation &#39;com.kekxv:autowired:0.2.6&#39;</code> (<code>0.2.6</code>为版本号，可更改为最新版本)</li>
</ol>
</blockquote>
<p>方式二</p>
<blockquote>
<p>直接下载前往 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0phdmFSZXBvL3BhY2thZ2Vz">仓库<i class="fa fa-external-link-alt"></i></span> 下载<code>autowired-0.2.6.aar</code>导入到项目。<br>根据情况，可能需要将<code>autowired-0.2.6.aar</code> 拷贝到<code>libs</code> 目录并 <code>implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</code> 更改为<code>implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;,&quot;*.aar&quot;])</code></p>
</blockquote>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>先按照 引入方式 <a href="doc/Introduce.md">Introduce</a> 引入。</p>
<p>API 文档参照 <a href="doc/API.md">API</a>。</p>
<h2 id="创建基础接口"><a href="#创建基础接口" class="headerlink" title="创建基础接口"></a>创建基础接口</h2><h3 id="教师-ITeacher"><a href="#教师-ITeacher" class="headerlink" title="教师 ITeacher"></a>教师 ITeacher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="学生-IStudent"><a href="#学生-IStudent" class="headerlink" title="学生 IStudent"></a>学生 IStudent</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">learn</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollCall</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="作业-IHomework"><a href="#作业-IHomework" class="headerlink" title="作业 IHomework"></a>作业 IHomework</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHomework</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Assignment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h2><h3 id="教师-TeacherImpl"><a href="#教师-TeacherImpl" class="headerlink" title="教师 TeacherImpl"></a>教师 TeacherImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.ITeacher;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(service = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherImpl</span> <span class="keyword">implements</span> <span class="title">ITeacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;TeacherImpl&quot;</span>, String.format(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; teacher teach %d \n&quot;</span>, count++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;TeacherImpl&quot;</span>, <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; teacher teach 开始上课 \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="学生-StudentImpl"><a href="#学生-StudentImpl" class="headerlink" title="学生 StudentImpl"></a>学生 StudentImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.IStudent;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(service = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentImpl</span> <span class="keyword">implements</span> <span class="title">IStudent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;StudentImpl&quot;</span>, String.format(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student %s 进入课堂&quot;</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">learn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;StudentImpl&quot;</span>, String.format(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student %s learn %d&quot;</span>, name, count++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;StudentImpl&quot;</span>, String.format(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student %s here&quot;</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><h4 id="数学-HomeworkMathImpl"><a href="#数学-HomeworkMathImpl" class="headerlink" title="数学 HomeworkMathImpl"></a>数学 HomeworkMathImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.IHomework;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.IAutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeworkMathImpl</span> <span class="keyword">extends</span> <span class="title">IAutoWired</span> <span class="keyword">implements</span> <span class="title">IHomework</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeworkMathImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;HomeworkMathImpl&quot;</span>, <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 数学作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Assignment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;HomeworkMathImpl&quot;</span>, <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 布置数学作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="语文-HomeworkChineseImpl"><a href="#语文-HomeworkChineseImpl" class="headerlink" title="语文 HomeworkChineseImpl"></a>语文 HomeworkChineseImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.IHomework;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.IAutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeworkChineseImpl</span> <span class="keyword">extends</span> <span class="title">IAutoWired</span> <span class="keyword">implements</span> <span class="title">IHomework</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeworkChineseImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;HomeworkChineseImpl&quot;</span>, <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 语文作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Assignment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;HomeworkMathImpl&quot;</span>, <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 布置语文作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h2><ol>
<li>School</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.R;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.Impl.HomeworkChineseImpl;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.AutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.IAutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.InjectView;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> <span class="keyword">extends</span> <span class="title">IAutoWired</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AutoWired()</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小红&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_A;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小明&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_B;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> ITeacher teacher;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    Context context;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;NonConstantResourceId&quot;)</span></span><br><span class="line">    <span class="meta">@InjectView(R.id.text)</span></span><br><span class="line">    TextView text;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;Chinese&quot;, Interpretation = &quot;getIHomework&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IHomework iHomework;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; getIHomework() &#123;</span><br><span class="line">        <span class="keyword">return</span> HomeworkChineseImpl.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        student.rollCall();</span><br><span class="line">        student_A.rollCall();</span><br><span class="line">        student_B.rollCall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        teacher.teach();</span><br><span class="line">        student.learn();</span><br><span class="line">        student_A.learn();</span><br><span class="line">        student_B.learn();</span><br><span class="line">        Log.d(<span class="string">&quot;context&quot;</span>, context.toString());</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">            text.setText(<span class="string">&quot;开始上课&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        iHomework.Assignment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mSchool</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.AutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.IAutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mSchool</span> <span class="keyword">extends</span> <span class="title">IAutoWired</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AutoWired()</span></span><br><span class="line">    <span class="keyword">public</span> IStudent student;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小红&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_A;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小明&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_B;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> ITeacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;Math&quot;, Interpretation = &quot;getIHomework&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IHomework iHomework;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIHomework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HomeworkMathImpl&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">mSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        student.rollCall();</span><br><span class="line">        student_A.rollCall();</span><br><span class="line">        student_B.rollCall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        teacher.teach();</span><br><span class="line">        student.learn();</span><br><span class="line">        student_A.learn();</span><br><span class="line">        student_B.learn();</span><br><span class="line"></span><br><span class="line">        iHomework.Assignment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主类"><a href="#主类" class="headerlink" title="主类"></a>主类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.IStudent;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.Impl.HomeworkChineseImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.Impl.HomeworkMathImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.Impl.StudentImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.Impl.TeacherImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.School;</span><br><span class="line"><span class="keyword">import</span> com.example.test_autowired.testClass.mSchool;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.AutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.IAutoWired;</span><br><span class="line"><span class="keyword">import</span> com.kekxv.AutoWired.InjectView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    School school;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    mSchool mSchool;</span><br><span class="line">    <span class="meta">@AutoWired()</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小红&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_A;</span><br><span class="line">    <span class="meta">@AutoWired(Sign = &quot;小明&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IStudent student_B;</span><br><span class="line">    <span class="meta">@SuppressLint(&quot;NonConstantResourceId&quot;)</span></span><br><span class="line">    <span class="meta">@InjectView(R.id.text)</span></span><br><span class="line">    TextView text;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 自动扫描</span></span><br><span class="line">        <span class="comment">// IAutoWired.init(this);</span></span><br><span class="line">        <span class="comment">// 手动设置</span></span><br><span class="line">        IAutoWired.init(<span class="keyword">new</span> Class&lt;?&gt;[]&#123;</span><br><span class="line">                StudentImpl.class,</span><br><span class="line">                TeacherImpl.class,</span><br><span class="line">                mSchool.class,</span><br><span class="line">                School.class,</span><br><span class="line">                HomeworkChineseImpl.class,</span><br><span class="line">                HomeworkMathImpl.class,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将注册 Context 自动注入</span></span><br><span class="line">        IAutoWired.registered(Context.class, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        IAutoWired.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后注册测试 将注册 Activity 自动注入</span></span><br><span class="line">        IAutoWired.registered(Activity.class, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        student.setName(<span class="string">&quot;小兰&quot;</span>);</span><br><span class="line">        student_A.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        student_B.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        school.work();</span><br><span class="line">        mSchool.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><p>在例子中，<code>school</code>与<code>mSchool</code>包括其内部的<code>@AutoWired</code>均自动注入成功，执行后输出结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  进入课堂</span><br><span class="line">I/chatty: uid=10152(com.example.test_autowired) identical 1 line</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  进入课堂</span><br><span class="line">I/TeacherImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; teacher teach 开始上课 </span><br><span class="line">I/HomeworkChineseImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 语文作业</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  here</span><br><span class="line">I/chatty: uid=10152(com.example.test_autowired) identical 1 line</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  here</span><br><span class="line">I/HomeworkMathImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 数学作业</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  here</span><br><span class="line">I/chatty: uid=10152(com.example.test_autowired) identical 1 line</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student  here</span><br><span class="line">I/TeacherImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; teacher teach 0 </span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小兰 learn 0</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小红 learn 0</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小明 learn 0</span><br><span class="line">D/context: com.example.test_autowired.MainActivity@4d23216</span><br><span class="line">I/HomeworkMathImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 布置语文作业</span><br><span class="line">I/TeacherImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; teacher teach 1 </span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小兰 learn 1</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小红 learn 1</span><br><span class="line">I/StudentImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; student 小明 learn 1</span><br><span class="line">I/HomeworkMathImpl: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 布置数学作业</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新记录</p>
<ul>
<li><p>20210127 修复 <code>interface</code> 接口包含变量没有注入问题。</p>
</li>
<li><p>20210126 修复重复依赖陷入无限回调的问题。</p>
</li>
<li><p>20210126 增加 <code>Interpretation</code> 用于 多个 <code>interface</code> 继承类型判断注入对象。</p>
</li>
<li></li>
<li><p>20210124 修复重复依赖陷入无限回调的问题。</p>
</li>
<li><p>20210124 增加 <code>InjectView</code> 自动<code>findViewById</code>并赋值；需要 <code>setContentView</code> 之后调用。</p>
</li>
<li></li>
<li><p>20210114 增加<code>Service</code>内<code>service</code>标记，用于开启调用<code>start()</code>。</p>
</li>
<li><p>20210114 自动注入后注入，可在更新之后自动注入之前未找到的注入字段。</p>
</li>
<li><p>20210114 在原有自动扫描的基础上，增加手动传入 <code>Service</code> 类。</p>
</li>
<li><p>20201226 增加<code>Sign</code>标记，用于区分各个不一样的实例。</p>
</li>
<li><p>20201226 增加<code>IAutoWired.registered</code>手动注册，可用于自动注入<code>Context</code>之类。</p>
</li>
</ul>
</blockquote>
<p>原理说明：</p>
<ol>
<li>扫描所有(或手动传入)带有 <code>@Service</code> 的自动注入类</li>
<li>手动或继承<code>IAutoWired</code> 自动调用 <code>IAutoWired.inject(this);</code> 进行注入。</li>
<li>为保证<code>private</code>也能注入成功；通过反射以及<code>setAccessible(true);</code>修改权限进行<code>newInstance()</code>以及<code>赋值</code>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor=cla.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        constructor.newInstance()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[]fields=source.getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(source,target);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>本项目是用于模拟自动注入，通过添加注解<code>@AutoWired</code>，举个例子：<a href="doc/Usage.md">Usage</a></p>
<p>注意：所有自动注入的同类型类，为同一个对象。</p>
<p>为了能够区分对应的自动注入实例 ，则需要添加注解<code>@Service</code>，方便<code>AutoWired</code>确认。</p>
<h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ol>
<li>目前还是有些不足的地方 <del>，例如当有多个实现类，希望能够根据指定参数或者指定注解，自动注入不一样的实现类，从而更灵活智能，但这个只能看后期项目需求或者是否有时间以及是否有好心人帮忙完善了</del>(已在 0.2.6版本加上)。</li>
<li><code>DexFile</code>已经被 <code>API 29</code> 以上列为过时(<code>Deprecated</code>)，这个在扫描当前类时候用上，需要寻找一个替换方案。不过在虚拟机<code>Android11</code>上面能够正常使用。</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTI3Njk1L2FydGljbGUvZGV0YWlscy8xMDQyMTczOTc=">仿springboot @Autowired自动注入:https://blog.csdn.net/qq_38527695/article/details/104217397<i class="fa fa-external-link-alt"></i></span></p>
<p>其他互联网文档</p>
<p>备注：由于找资料比较多和杂，部分资料查看后关闭页面，导致没有加入到参考文档内，如果您发现本文章内有借鉴您的文档的部分，请将您的文献地址提交<code>Issues</code>或者提交 PR(<code>pull requests</code>)<br>到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L0FuZHJvaWRBdXRvV2lyZWQ=">https://github.com/kekxv/AndroidAutoWired<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>injection</tag>
      </tags>
  </entry>
  <entry>
    <title>kekxv 个人博客</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><h4 id="域名：-https-blog-kekxv-io"><a href="#域名：-https-blog-kekxv-io" class="headerlink" title="域名： https://blog.kekxv.io"></a>域名： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmtla3h2LmlvLw==">https://blog.kekxv.io<i class="fa fa-external-link-alt"></i></span></h4><h4 id="主题："><a href="#主题：" class="headerlink" title="主题："></a>主题：</h4><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yYWluY2FsLmNvbS8=">NexT<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">NexT.Gemini<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="源码：GitHub"><a href="#源码：GitHub" class="headerlink" title="源码：GitHub"></a>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tla3h2L2tla3h2LmdpdGh1Yi5pbw==">GitHub<i class="fa fa-external-link-alt"></i></span></h4>]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
